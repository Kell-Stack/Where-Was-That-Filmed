{"ast":null,"code":"var _jsxFileName = \"/Users/tpl9/Dev/WWTF/client/src/AllActorsList.js\";\nimport React, { Component } from 'react'; // import {Container, Row, Col }from 'react-bootstrap'\n// import { MapContainer } from './MapContainer';\n\nconst APIactors = '/AllActors';\nconst APItourbyactor = '/TourByActor/';\n\nclass AllActorsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actors: [],\n      sortedActors: [],\n      actorsWithTitles: []\n    };\n  } //this function calls the db and fetches infor with query\n  //then returns results of all actos\n\n\n  loadActors() {\n    console.log(\"Ringing:\", APIactors);\n    fetch(APIactors).then(res => res.json()).then(result => {\n      this.setState({\n        actors: result\n      }); //this calls the generateUniqueActors function with the results from loadAll and filters the list by unique actors\n      //after the list is sanitized of duplicates it's then sorted\n\n      this.setState({\n        sortedActors: this.generateUniqueActors(this.state.actors)\n      }); //console.log('✅',this.generateUniqueActors(this.state.actors))\n      // this.locationsByActors(this.state.sortedActors)\n\n      console.log(\"😎\", this.locationsByActors(this.state.sortedActors));\n    }).catch(err => console.log('🛑🛑🛑 Check All Actors Component', err));\n  } //checks to make sure each actor is displayed once, if the actor is not in the list then they exist in the sortedActors array already\n\n\n  generateUniqueActors(filmList) {\n    var uniqueActors = {};\n    filmList.forEach(film => {\n      // TODO: refactor into loop\n      if (uniqueActors[film.actor_1] === undefined) {\n        uniqueActors[film.actor_1] = true;\n      }\n\n      if (uniqueActors[film.actor_2] === undefined) {\n        uniqueActors[film.actor_2] = true;\n      }\n\n      if (uniqueActors[film.actor_3] === undefined) {\n        uniqueActors[film.actor_3] = true;\n      }\n    });\n    let sortedActors = Object.keys(uniqueActors).sort();\n    return sortedActors;\n  }\n\n  componentWillMount() {\n    this.loadActors();\n  } //this function takes the list results from load actors and sends a query back to the server to grab\n  //every row that actor is featured in returning the title and id of that row\n\n\n  locationsByActors(actorLocList) {\n    actorLocList.forEach((actor, index) => {\n      //if (index > 0) { return }\n      let newURI = APItourbyactor + actor.trim();\n      console.log(\"?\", newURI);\n      fetch(newURI).then(res => res.json()).then(result => {\n        // this.state({actorsWithTitles})\n        console.log(\"💋\", result);\n      }).catch(err => console.log('Check Actor\\'s name🐲', actor, err));\n    });\n  }\n\n  idLocationsByActors(idForMarker) {\n    idForMarker.forEach(id => {\n      console.log(\"🍄\", id);\n    });\n  } //NEXT STEPS:\n  //1. create marker by id: write new function to use the returned id to mark on the map where that location was\n  //2. have a drop down or checkbox or radio button next to the id so that users can save loc\n  //3. pagination set up for list (nice feature)\n  //4. follow similiar queries but for titles (prop a little easier only dealing with one column)\n  //4. contain map so it's in fixed location. as well as column for Actors and Titles\n  //r\n  // [\n  // \t{name: \"Eddie Murphy\", films: [ {name: \"\", id: \"\"} ]}\n  // ]\n  // [{\n  // actor: value\n  // \t{id: val,\n  // \t{title: val}\n  // }]\n  // onActorClick = (props) =>\n  // \tthis.setState({\n  // \t\tselectedActor: props\n  // \t})\n\n\n  render() {\n    console.log('frommmmm actors component file', this.state.actors.length);\n    let lis = this.state.sortedActors.map(actor => {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, actor);\n    });\n    let idMarker;\n    return React.createElement(\"div\", {\n      className: \"App-Component-Actors-Route-Container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Hello Actors\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, lis));\n  }\n\n}\n\nexport default AllActorsList;","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/AllActorsList.js"],"names":["React","Component","APIactors","APItourbyactor","AllActorsList","constructor","props","state","actors","sortedActors","actorsWithTitles","loadActors","console","log","fetch","then","res","json","result","setState","generateUniqueActors","locationsByActors","catch","err","filmList","uniqueActors","forEach","film","actor_1","undefined","actor_2","actor_3","Object","keys","sort","componentWillMount","actorLocList","actor","index","newURI","trim","idLocationsByActors","idForMarker","id","render","length","lis","map","idMarker"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n// import {Container, Row, Col }from 'react-bootstrap'\n// import { MapContainer } from './MapContainer';\nconst APIactors = '/AllActors'\nconst APItourbyactor = '/TourByActor/'\n\n\nclass AllActorsList extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactors: [],\n\t\t\tsortedActors: [],\n\t\t\tactorsWithTitles: []\n\t\t}\n\t}\n\n\n\t//this function calls the db and fetches infor with query\n\t//then returns results of all actos\n\tloadActors (){\n\t\tconsole.log(\"Ringing:\", APIactors)\n\t\tfetch (APIactors)\n\t\t\t.then(res => res.json())\n\t\t\t.then(result => {\n\t\t\t\tthis.setState({actors:result})\n\t\t\t\t//this calls the generateUniqueActors function with the results from loadAll and filters the list by unique actors\n\t\t\t\t//after the list is sanitized of duplicates it's then sorted\n\t\t\t\tthis.setState({sortedActors: this.generateUniqueActors(this.state.actors)})\n\t\t\t\t//console.log('✅',this.generateUniqueActors(this.state.actors))\n\t\t\t\t// this.locationsByActors(this.state.sortedActors)\n\t\t\t\tconsole.log(\"😎\", this.locationsByActors(this.state.sortedActors))\n\n\t\t\t})\n\t\t\t.catch(err => console.log('🛑🛑🛑 Check All Actors Component',err))\n\t}\n\n\t//checks to make sure each actor is displayed once, if the actor is not in the list then they exist in the sortedActors array already\n\tgenerateUniqueActors(filmList) {\n\t\tvar uniqueActors = {}\n\t\tfilmList.forEach(film => {\n\t\t\t// TODO: refactor into loop\n\t\t\tif (uniqueActors[film.actor_1] === undefined) {\n\t\t\t\tuniqueActors[film.actor_1] = true\n\t\t\t}\n\t\t\tif (uniqueActors[film.actor_2] === undefined) {\n\t\t\t\tuniqueActors[film.actor_2] = true\n\t\t\t}\n\t\t\tif (uniqueActors[film.actor_3] === undefined) {\n\t\t\t\tuniqueActors[film.actor_3] = true\n\t\t\t}\n\t\t})\n\n\t\tlet sortedActors = Object.keys(uniqueActors).sort()\n\t\treturn sortedActors\n}\n\n\tcomponentWillMount() {\n\t\tthis.loadActors();\n\t}\n\n//this function takes the list results from load actors and sends a query back to the server to grab\n//every row that actor is featured in returning the title and id of that row\n\n\n\tlocationsByActors(actorLocList) {\n\t\tactorLocList.forEach((actor, index) => {\n\t\t\t//if (index > 0) { return }\n\t\t\tlet newURI = APItourbyactor + actor.trim()\n\t\t\tconsole.log(\"?\", newURI)\n\t\t\tfetch (newURI)\n\t\t\t.then(res => res.json())\n\t\t\t.then(result => {\n\t\t\t\t// this.state({actorsWithTitles})\n\t\t\t\tconsole.log(\"💋\", result)\n\t\t\t})\n\t\t\t.catch(err => console.log('Check Actor\\'s name🐲',actor, err))\n\t\t})\n\t}\n\n\tidLocationsByActors(idForMarker) {\n\t\tidForMarker.forEach((id) => {\n\t\t\tconsole.log(\"🍄\", id)\n\t\t})\n\t}\n\n\t//NEXT STEPS:\n\t//1. create marker by id: write new function to use the returned id to mark on the map where that location was\n\t//2. have a drop down or checkbox or radio button next to the id so that users can save loc\n\t//3. pagination set up for list (nice feature)\n\t//4. follow similiar queries but for titles (prop a little easier only dealing with one column)\n\t//4. contain map so it's in fixed location. as well as column for Actors and Titles\n\n\n\n//r\n// [\n// \t{name: \"Eddie Murphy\", films: [ {name: \"\", id: \"\"} ]}\n// ]\n\n// [{\n// actor: value\n// \t{id: val,\n// \t{title: val}\n// }]\n\n\n\t// onActorClick = (props) =>\n\t// \tthis.setState({\n\t// \t\tselectedActor: props\n\t// \t})\n\n\trender(){\n\n\t\tconsole.log('frommmmm actors component file', this.state.actors.length)\n\n\t\tlet lis = this.state.sortedActors.map(actor => {\n\t\t\treturn <li>{actor}</li>\n\t\t})\n\n\t\tlet idMarker;\n\n\t\treturn (\n\t\t\t<div className=\"App-Component-Actors-Route-Container\">\n\t\t\t\t\t\t<h1>Hello Actors</h1>\n\n\t\t\t\t\t\t<ol>\n\t\t\t\t\t\t\t{lis}\n\t\t\t\t\t\t</ol>\n\n\t\t\t</div>\n\t\t\t\t)\n\t}\n}\n\n\n\n\n\nexport default AllActorsList;"]},"metadata":{},"sourceType":"module"}