{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport MarkerClusterer from '/Users/tpl9/Dev/WWTF/client/src/markerclusterer.js';\nconst evtNames = ['click', 'dblclick', 'dragend', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'recenter'];\n\nconst markerCluster = props => {\n  const map = props.map,\n        google = props.google,\n        markers = props.markers;\n\n  const handleEvent = ({\n    event,\n    marker,\n    entry\n  }) => {\n    if (props[event]) {\n      props[event]({\n        props: props,\n        marker: marker,\n        event: event,\n        entry: entry\n      });\n    }\n  }; // This hook works like ComponentWillMount\n  // The  hook isn't really needed, this whole thing worked without it,\n  // I added the hook so that I could implement a cleanup function\n  // useEffect(() => {\n  //   if (map && markers) {\n  //     const mapMarkers = markers.map((marker) => {\n  //       const entry = new google.maps.Marker({\n  //         position: {\n  //           lat: marker.position.lat,\n  //           lng: marker.position.lng\n  //         },\n  //         map: map,\n  //         name: marker.name\n  //       })\n  //       evtNames.forEach(e => {\n  //         entry.addListener(e, () => handleEvent({\n  //           event: e,\n  //           marker: marker,\n  //           entry: entry\n  //         }))\n  //       })\n  //       return entry\n  //     })\n  //     const clusterer = new MarkerClusterer(map, mapMarkers, {imagePath: '/markerclusterer/m'})\n  //     // Cleanup function. Note, this is only returned if we create the markers\n  //     return () => {\n  //       //console.log('Cleaning up markers')\n  //       clusterer.clearMarkers()\n  //     }\n  //   }\n  // }, [map, google, markers])\n  // Do we need to render anything??\n\n\n  return null;\n};\n\nmarkerCluster.propTypes = {\n  map: PropTypes.object,\n  google: PropTypes.object,\n  markers: PropTypes.arrayOf(PropTypes.shape({\n    position: PropTypes.shape({\n      lat: PropTypes.number.isRequired,\n      lng: PropTypes.number.isRequired\n    }).isRequired,\n    name: PropTypes.string.isRequired\n  }))\n};\nexport default markerCluster;","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/MarkerCluster.js"],"names":["React","PropTypes","MarkerClusterer","evtNames","markerCluster","props","map","google","markers","handleEvent","event","marker","entry","propTypes","object","arrayOf","shape","position","lat","number","isRequired","lng","name","string"],"mappings":"AAAA,OAAOA,KAAP,MAAsB,OAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,oDAA5B;AAEA,MAAMC,QAAQ,GAAG,CACb,OADa,EAEb,UAFa,EAGb,SAHa,EAIb,WAJa,EAKb,UALa,EAMb,WANa,EAOb,SAPa,EAQb,UARa,CAAjB;;AAWE,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA,QACxBC,GADwB,GACAD,KADA,CACxBC,GADwB;AAAA,QACnBC,MADmB,GACAF,KADA,CACnBE,MADmB;AAAA,QACXC,OADW,GACAH,KADA,CACXG,OADW;;AAG/B,QAAMC,WAAW,GAAG,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,GAAD,KAA4B;AAC9C,QAAIP,KAAK,CAACK,KAAD,CAAT,EAAkB;AAChBL,MAAAA,KAAK,CAACK,KAAD,CAAL,CAAa;AACXL,QAAAA,KAAK,EAAEA,KADI;AAEXM,QAAAA,MAAM,EAAEA,MAFG;AAGXD,QAAAA,KAAK,EAAEA,KAHI;AAIXE,QAAAA,KAAK,EAAEA;AAJI,OAAb;AAMD;AACF,GATD,CAH+B,CAc/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA,SAAQ,IAAR;AAED,CAtDD;;AAwDAR,aAAa,CAACS,SAAd,GAA0B;AACxBP,EAAAA,GAAG,EAAEL,SAAS,CAACa,MADS;AAExBP,EAAAA,MAAM,EAAEN,SAAS,CAACa,MAFM;AAGxBN,EAAAA,OAAO,EAAEP,SAAS,CAACc,OAAV,CAAkBd,SAAS,CAACe,KAAV,CAAgB;AACzCC,IAAAA,QAAQ,EAAEhB,SAAS,CAACe,KAAV,CAAgB;AACxBE,MAAAA,GAAG,EAAEjB,SAAS,CAACkB,MAAV,CAAiBC,UADE;AAExBC,MAAAA,GAAG,EAAEpB,SAAS,CAACkB,MAAV,CAAiBC;AAFE,KAAhB,EAGPA,UAJsC;AAKzCE,IAAAA,IAAI,EAAErB,SAAS,CAACsB,MAAV,CAAiBH;AALkB,GAAhB,CAAlB;AAHe,CAA1B;AAYA,eAAehB,aAAf","sourcesContent":["import React, {} from 'react'\nimport PropTypes from 'prop-types'\nimport MarkerClusterer from '/Users/tpl9/Dev/WWTF/client/src/markerclusterer.js'\n\nconst evtNames = [\n    'click',\n    'dblclick',\n    'dragend',\n    'mousedown',\n    'mouseout',\n    'mouseover',\n    'mouseup',\n    'recenter',\n  ]\n\n  const markerCluster = (props) => {\n    const {map, google, markers} = props\n\n    const handleEvent = ({event, marker, entry}) => {\n      if (props[event]) {\n        props[event]({\n          props: props,\n          marker: marker,\n          event: event,\n          entry: entry\n        })\n      }\n    }\n\n    // This hook works like ComponentWillMount\n    // The  hook isn't really needed, this whole thing worked without it,\n    // I added the hook so that I could implement a cleanup function\n    // useEffect(() => {\n    //   if (map && markers) {\n    //     const mapMarkers = markers.map((marker) => {\n    //       const entry = new google.maps.Marker({\n    //         position: {\n    //           lat: marker.position.lat,\n    //           lng: marker.position.lng\n    //         },\n    //         map: map,\n    //         name: marker.name\n    //       })\n\n    //       evtNames.forEach(e => {\n    //         entry.addListener(e, () => handleEvent({\n    //           event: e,\n    //           marker: marker,\n    //           entry: entry\n    //         }))\n    //       })\n\n    //       return entry\n    //     })\n\n    //     const clusterer = new MarkerClusterer(map, mapMarkers, {imagePath: '/markerclusterer/m'})\n\n    //     // Cleanup function. Note, this is only returned if we create the markers\n    //     return () => {\n    //       //console.log('Cleaning up markers')\n    //       clusterer.clearMarkers()\n    //     }\n    //   }\n    // }, [map, google, markers])\n\n\n    // Do we need to render anything??\n    return (null)\n\n  }\n\n  markerCluster.propTypes = {\n    map: PropTypes.object,\n    google: PropTypes.object,\n    markers: PropTypes.arrayOf(PropTypes.shape({\n      position: PropTypes.shape({\n        lat: PropTypes.number.isRequired,\n        lng: PropTypes.number.isRequired,\n      }).isRequired,\n      name: PropTypes.string.isRequired,\n    })),\n  }\n\n  export default markerCluster"]},"metadata":{},"sourceType":"module"}