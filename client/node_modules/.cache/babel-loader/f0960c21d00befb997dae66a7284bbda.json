{"ast":null,"code":"import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Map } from 'google-maps-react';\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '50%',\n    height: '50%'\n  }\n};\n\nclass CurrentLoc extends Component {\n  constructor(props) {\n    super(props);\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {} // if (this.props.centerAroundCurrentLocation) {\n  //     if (navigator && navigator.geolocation) {\n  //         navigator.geolocation.getCurrentPosition(pos => {\n  //             const coords = pos.coords;\n  //             this.setState({\n  //                 currentLocation: {\n  //                     lat: coords.latitude,\n  //                     lng: coords.longitude\n  //                 }\n  //             });\n  //         });\n  //     }\n  // }\n  // this.loadMap();\n  // loadMap() {\n  //     if (this.props && this.props.google) {\n  //     // is google available?\n  //     const { google } = this.props;\n  //     const maps = google.maps;\n  //     console.log('👩🏽‍💻',maps)\n  //     const mapRef = this.refs.map;\n  //     // reference to the actual DOM element\n  //     const node = ReactDOM.findDOMNode(mapRef);\n  //     let { zoom } = this.props;\n  //     const { lat, lng } = this.state.currentLocation;\n  //     const center = new maps.LatLng(lat, lng);\n  //     const mapConfig = Object.assign(\n  //         {},\n  //         {\n  //             center: center,\n  //             zoom: zoom\n  //         }\n  //     );\n  //     // maps.Map() constructor instantiates the map\n  //     this.map = new maps.Map(node, mapConfig);\n  //     }\n  // }\n  // renderChildren() {\n  //     const { children } = this.props;\n  //     if (!children) return;\n  //     return React.Children.map(children, c => {\n  //         if (!c) return;\n  //         return React.cloneElement(c, {\n  //             map: this.map,\n  //             google: this.props.google,\n  //             mapCenter: this.state.currentLocation\n  //         });\n  //     });\n  // }\n  //     render() {\n  //         const style = Object.assign({}, mapStyles.map);\n  //         console.log('👩🏽‍💻',this.map)\n  //         return (\n  //             <div className='Map.js-Div-Container'>\n  //                 <div style={style} ref=\"map\">\n  //                     Loading map...\n  //                 </div>\n  //             {this.renderChildren()}\n  // †\n  //             </div>\n  //         );\n  //     }\n\n\n} //     render() {\n//         const style = Object.assign({}, mapStyles.map);\n//         return (\n//             <Map google={this.props.google} zoom={14}>\n//             {this.renderChildren()}\n//             </Map>\n//         );\n//     }\n// }\n// SF centered lat/lng from google\n\n\nCurrentLoc.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 37.7749,\n    lng: -122.4194\n  },\n  centerArroundCurrentLocation: false,\n  visible: true\n};\nexport default Map;","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/CurrentLoc.js"],"names":["React","Component","ReactDOM","Map","mapStyles","map","position","width","height","CurrentLoc","constructor","props","initialCenter","lat","lng","state","currentLocation","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","current","maps","center","LatLng","panTo","componentDidMount","defaultProps","zoom","centerArroundCurrentLocation","visible"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,GAAT,QAAmB,mBAAnB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,GAAG,EAAE;AACHC,IAAAA,QAAQ,EAAE,UADP;AAEHC,IAAAA,KAAK,EAAE,KAFJ;AAGHC,IAAAA,MAAM,EAAE;AAHL;AADS,CAAlB;;AAUA,MAAMC,UAAN,SAAyBR,SAAzB,CAAmC;AAC/BS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,kCAGM,KAAKA,KAAL,CAAWC,aAHjB;AAAA,UAGPC,GAHO,yBAGPA,GAHO;AAAA,UAGFC,GAHE,yBAGFA,GAHE;AAIf,SAAKC,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE;AACjBH,QAAAA,GAAG,EAAEA,GADY;AAEjBC,QAAAA,GAAG,EAAEA;AAFY;AADR,KAAb;AAMH;;AAGDG,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAID,SAAS,CAACE,MAAV,KAAqB,KAAKT,KAAL,CAAWS,MAApC,EAA4C;AACxC,WAAKC,OAAL;AACH;;AACD,QAAIF,SAAS,CAACH,eAAV,KAA8B,KAAKD,KAAL,CAAWC,eAA7C,EAA8D;AAC1D,WAAKM,WAAL;AACH;AACJ;;AAEDA,EAAAA,WAAW,GAAG;AACV,UAAMjB,GAAG,GAAG,KAAKA,GAAjB;AACA,UAAMkB,OAAO,GAAG,KAAKR,KAAL,CAAWC,eAA3B;AAEA,UAAMI,MAAM,GAAG,KAAKT,KAAL,CAAWS,MAA1B;AACA,UAAMI,IAAI,GAAGJ,MAAM,CAACI,IAApB;;AAGA,QAAInB,GAAJ,EAAS;AACL,UAAIoB,MAAM,GAAG,IAAID,IAAI,CAACE,MAAT,CAAgBH,OAAO,CAACV,GAAxB,EAA6BU,OAAO,CAACT,GAArC,CAAb;AACAT,MAAAA,GAAG,CAACsB,KAAJ,CAAUF,MAAV;AACH;AACJ;;AAEDG,EAAAA,iBAAiB,GAAG,CAenB,CAfgB,CACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGJ;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA5GmC,C,CAgHnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACAnB,UAAU,CAACoB,YAAX,GAA0B;AACtBC,EAAAA,IAAI,EAAE,EADgB;AAEtBlB,EAAAA,aAAa,EAAE;AACbC,IAAAA,GAAG,EAAE,OADQ;AAEbC,IAAAA,GAAG,EAAE,CAAC;AAFO,GAFO;AAMtBiB,EAAAA,4BAA4B,EAAE,KANR;AAOtBC,EAAAA,OAAO,EAAE;AAPa,CAA1B;AAUG,eAAe7B,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport { Map} from 'google-maps-react';\n\nconst mapStyles = {\n    map: {\n      position: 'absolute',\n      width: '50%',\n      height: '50%'\n    }\n  };\n\n\n\nclass CurrentLoc extends Component {\n    constructor(props) {\n        super(props);\n\n        const { lat, lng } = this.props.initialCenter;\n        this.state = {\n            currentLocation: {\n            lat: lat,\n            lng: lng,\n            }\n        };\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n    }\n\n    recenterMap() {\n        const map = this.map;\n        const current = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n\n        if (map) {\n            let center = new maps.LatLng(current.lat, current.lng);\n            map.panTo(center);\n        }\n    }\n\n    componentDidMount() {\n        // if (this.props.centerAroundCurrentLocation) {\n        //     if (navigator && navigator.geolocation) {\n        //         navigator.geolocation.getCurrentPosition(pos => {\n        //             const coords = pos.coords;\n        //             this.setState({\n        //                 currentLocation: {\n        //                     lat: coords.latitude,\n        //                     lng: coords.longitude\n        //                 }\n        //             });\n        //         });\n        //     }\n        // }\n        // this.loadMap();\n    }\n\n    // loadMap() {\n    //     if (this.props && this.props.google) {\n    //     // is google available?\n    //     const { google } = this.props;\n    //     const maps = google.maps;\n    //     console.log('👩🏽‍💻',maps)\n\n    //     const mapRef = this.refs.map;\n\n    //     // reference to the actual DOM element\n    //     const node = ReactDOM.findDOMNode(mapRef);\n\n    //     let { zoom } = this.props;\n    //     const { lat, lng } = this.state.currentLocation;\n    //     const center = new maps.LatLng(lat, lng);\n    //     const mapConfig = Object.assign(\n    //         {},\n    //         {\n    //             center: center,\n    //             zoom: zoom\n    //         }\n    //     );\n    //     // maps.Map() constructor instantiates the map\n    //     this.map = new maps.Map(node, mapConfig);\n    //     }\n    // }\n\n    // renderChildren() {\n    //     const { children } = this.props;\n\n    //     if (!children) return;\n\n    //     return React.Children.map(children, c => {\n    //         if (!c) return;\n    //         return React.cloneElement(c, {\n    //             map: this.map,\n    //             google: this.props.google,\n    //             mapCenter: this.state.currentLocation\n    //         });\n    //     });\n    // }\n\n//     render() {\n//         const style = Object.assign({}, mapStyles.map);\n//         console.log('👩🏽‍💻',this.map)\n//         return (\n//             <div className='Map.js-Div-Container'>\n//                 <div style={style} ref=\"map\">\n//                     Loading map...\n//                 </div>\n//             {this.renderChildren()}\n// †\n//             </div>\n//         );\n//     }\n}\n\n\n//     render() {\n//         const style = Object.assign({}, mapStyles.map);\n//         return (\n//             <Map google={this.props.google} zoom={14}>\n//             {this.renderChildren()}\n//             </Map>\n//         );\n//     }\n// }\n\n\n// SF centered lat/lng from google\nCurrentLoc.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n      lat: 37.7749,\n      lng: -122.4194\n    },\n    centerArroundCurrentLocation: false,\n    visible: true\n};\n\n   export default Map;"]},"metadata":{},"sourceType":"module"}