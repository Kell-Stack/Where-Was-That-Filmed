{"ast":null,"code":"import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport MarkerClusterer from './markerclusterer/markerclusterer.js.js';\nconst evtNames = ['click', 'dblclick', 'dragend', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'recenter'];\n\nconst markerCluster = props => {\n  const map = props.map,\n        google = props.google,\n        markers = props.markers;\n\n  const handleEvent = ({\n    event,\n    marker,\n    entry\n  }) => {\n    if (props[event]) {\n      props[event]({\n        props: props,\n        marker: marker,\n        event: event,\n        entry: entry\n      });\n    }\n  }; // This hook works like ComponentWillMount\n  // The  hook isn't really needed, this whole thing worked without it,\n  // I added the hook so that I could implement a cleanup function\n\n\n  useEffect(() => {\n    if (map && markers) {\n      const mapMarkers = markers.map(marker => {\n        const entry = new google.maps.Marker({\n          position: {\n            lat: marker.position.lat,\n            lng: marker.position.lng\n          },\n          map: map,\n          name: marker.name\n        });\n        evtNames.forEach(e => {\n          entry.addListener(e, () => handleEvent({\n            event: e,\n            marker: marker,\n            entry: entry\n          }));\n        });\n        return entry;\n      });\n      const clusterer = new MarkerClusterer(map, mapMarkers, {\n        imagePath: '/markerclusterer/m'\n      }); // Cleanup function. Note, this is only returned if we create the markers\n\n      return () => {\n        //console.log('Cleaning up markers')\n        clusterer.clearMarkers();\n      };\n    }\n  }, [map, google, markers]); // Do we need to render anything??\n\n  return null;\n};\n\nmarkerCluster.propTypes = {\n  map: PropTypes.object,\n  google: PropTypes.object,\n  markers: PropTypes.arrayOf(PropTypes.shape({\n    position: PropTypes.shape({\n      lat: PropTypes.number.isRequired,\n      lng: PropTypes.number.isRequired\n    }).isRequired,\n    name: PropTypes.string.isRequired\n  }))\n};\nexport default markerCluster;","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/MarkerCluster.js"],"names":["React","useEffect","PropTypes","MarkerClusterer","evtNames","markerCluster","props","map","google","markers","handleEvent","event","marker","entry","mapMarkers","maps","Marker","position","lat","lng","name","forEach","e","addListener","clusterer","imagePath","clearMarkers","propTypes","object","arrayOf","shape","number","isRequired","string"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport MarkerClusterer from './markerclusterer/markerclusterer.js.js'\n\nconst evtNames = [\n    'click',\n    'dblclick',\n    'dragend',\n    'mousedown',\n    'mouseout',\n    'mouseover',\n    'mouseup',\n    'recenter',\n  ]\n\n  const markerCluster = (props) => {\n    const {map, google, markers} = props\n\n    const handleEvent = ({event, marker, entry}) => {\n      if (props[event]) {\n        props[event]({\n          props: props,\n          marker: marker,\n          event: event,\n          entry: entry\n        })\n      }\n    }\n\n    // This hook works like ComponentWillMount\n    // The  hook isn't really needed, this whole thing worked without it,\n    // I added the hook so that I could implement a cleanup function\n    useEffect(() => {\n      if (map && markers) {\n        const mapMarkers = markers.map((marker) => {\n          const entry = new google.maps.Marker({\n            position: {\n              lat: marker.position.lat,\n              lng: marker.position.lng\n            },\n            map: map,\n            name: marker.name\n          })\n\n          evtNames.forEach(e => {\n            entry.addListener(e, () => handleEvent({\n              event: e,\n              marker: marker,\n              entry: entry\n            }))\n          })\n\n          return entry\n        })\n\n        const clusterer = new MarkerClusterer(map, mapMarkers, {imagePath: '/markerclusterer/m'})\n\n        // Cleanup function. Note, this is only returned if we create the markers\n        return () => {\n          //console.log('Cleaning up markers')\n          clusterer.clearMarkers()\n        }\n      }\n    }, [map, google, markers])\n\n\n    // Do we need to render anything??\n    return (null)\n\n  }\n\n  markerCluster.propTypes = {\n    map: PropTypes.object,\n    google: PropTypes.object,\n    markers: PropTypes.arrayOf(PropTypes.shape({\n      position: PropTypes.shape({\n        lat: PropTypes.number.isRequired,\n        lng: PropTypes.number.isRequired,\n      }).isRequired,\n      name: PropTypes.string.isRequired,\n    })),\n  }\n\n  export default markerCluster"]},"metadata":{},"sourceType":"module"}