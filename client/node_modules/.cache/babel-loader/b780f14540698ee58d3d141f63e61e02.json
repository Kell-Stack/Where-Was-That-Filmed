{"ast":null,"code":"var _jsxFileName = \"/Users/tpl9/Dev/WWTF/client/src/Map.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '50%',\n    height: '50%'\n  }\n}; // class GetAllLatLngs extends Component {\n//     constructor (props)\n// }\n\nclass CurrentLoc extends Component {\n  constructor(props) {\n    super(props);\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // is google available?\n      const google = this.props.google;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let zoom = this.props.zoom;\n      const _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() constructor instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const children = this.props.children;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Loading map...\"), this.renderChildren());\n  }\n\n} // class MarkerClusts extends Component {\n//     allMarkers () {\n//         var centerExample = {\n//             lat: 37.7749,\n//             lng: -122.4194\n//           }\n//         var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n//             var markers = locations.map(function(location, i) {\n//                 return new google.maps.Marker({\n//                 position: location,\n//                 label: labels[i % labels.length]\n//                 });\n//             });\n//             var markerCluster = new MarkerClusterer(map, markers,\n//                 {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});\n//                 var locations = [\n//                     {lat: 37.7698646, lng: -122.4660947},\n//                     {lat: 37.775144, lng: -122.4039924},\n//                     {lat: 37.7749295, lng: -122.4194155},\n//                     {lat: 37.793997, lng: -122.4023388},\n//                 ]\n//     }\n//     render() {\n//         return (\n//             <div>\n//             {this.renderChildren()}\n//             </div>\n//         )\n//     }\n// }\n// SF centered lat/lng from google\n\n\nCurrentLoc.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 37.7749,\n    lng: -122.4194\n  },\n  centerArroundCurrentLocation: false,\n  visible: true\n};\nexport default CurrentLoc;","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/Map.js"],"names":["React","Component","ReactDOM","mapStyles","map","position","width","height","CurrentLoc","constructor","props","initialCenter","lat","lng","state","currentLocation","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","current","maps","center","LatLng","panTo","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","renderChildren","children","Children","c","cloneElement","mapCenter","render","style","defaultProps","centerArroundCurrentLocation","visible"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n    map: {\n      position: 'absolute',\n      width: '50%',\n      height: '50%'\n    }\n  };\n\n// class GetAllLatLngs extends Component {\n//     constructor (props)\n// }\n\nclass CurrentLoc extends Component {\n    constructor(props) {\n        super(props);\n\n        const { lat, lng } = this.props.initialCenter;\n        this.state = {\n            currentLocation: {\n            lat: lat,\n            lng: lng\n            }\n        };\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n    }\n\n    recenterMap() {\n        const map = this.map;\n        const current = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n            let center = new maps.LatLng(current.lat, current.lng);\n            map.panTo(center);\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.centerAroundCurrentLocation) {\n            if (navigator && navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(pos => {\n                    const coords = pos.coords;\n                    this.setState({\n                        currentLocation: {\n                            lat: coords.latitude,\n                            lng: coords.longitude\n                        }\n                    });\n                });\n            }\n        }\n        this.loadMap();\n    }\n\n    loadMap() {\n        if (this.props && this.props.google) {\n        // is google available?\n        const { google } = this.props;\n        const maps = google.maps;\n\n        const mapRef = this.refs.map;\n\n        // reference to the actual DOM element\n        const node = ReactDOM.findDOMNode(mapRef);\n\n        let { zoom } = this.props;\n        const { lat, lng } = this.state.currentLocation;\n        const center = new maps.LatLng(lat, lng);\n        const mapConfig = Object.assign(\n            {},\n            {\n                center: center,\n                zoom: zoom\n            }\n        );\n        // maps.Map() constructor instantiates the map\n        this.map = new maps.Map(node, mapConfig);\n        }\n    }\n\n    renderChildren() {\n        const { children } = this.props;\n\n        if (!children) return;\n\n        return React.Children.map(children, c => {\n            if (!c) return;\n            return React.cloneElement(c, {\n                map: this.map,\n                google: this.props.google,\n                mapCenter: this.state.currentLocation\n            });\n        });\n    }\n\n    render() {\n        const style = Object.assign({}, mapStyles.map);\n        return (\n            <div>\n                <div style={style} ref=\"map\">\n                    Loading map...\n                </div>\n            {this.renderChildren()}\n            </div>\n        );\n    }\n}\n\n// class MarkerClusts extends Component {\n//     allMarkers () {\n//         var centerExample = {\n//             lat: 37.7749,\n//             lng: -122.4194\n//           }\n//         var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n//             var markers = locations.map(function(location, i) {\n//                 return new google.maps.Marker({\n//                 position: location,\n//                 label: labels[i % labels.length]\n//                 });\n//             });\n\n//             var markerCluster = new MarkerClusterer(map, markers,\n//                 {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});\n\n//                 var locations = [\n//                     {lat: 37.7698646, lng: -122.4660947},\n//                     {lat: 37.775144, lng: -122.4039924},\n//                     {lat: 37.7749295, lng: -122.4194155},\n//                     {lat: 37.793997, lng: -122.4023388},\n//                 ]\n//     }\n//     render() {\n//         return (\n//             <div>\n//             {this.renderChildren()}\n//             </div>\n//         )\n//     }\n// }\n\n\n// SF centered lat/lng from google\nCurrentLoc.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n      lat: 37.7749,\n      lng: -122.4194\n    },\n    centerArroundCurrentLocation: false,\n    visible: true\n};\n\n   export default CurrentLoc;"]},"metadata":{},"sourceType":"module"}