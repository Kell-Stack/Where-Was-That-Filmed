{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar helper_1 = require(\"../../utils/helper\");\n\nvar map_context_1 = require(\"../../map-context\");\n\nvar eventMap = {\n  onCenterChanged: \"center_changed\",\n  onClick: \"click\",\n  onDblClick: \"dblclick\",\n  onDrag: \"drag\",\n  onDragEnd: \"dragend\",\n  onDragStart: \"dragstart\",\n  onMouseDown: \"mousedown\",\n  onMouseMove: \"mousemove\",\n  onMouseOut: \"mouseout\",\n  onMouseOver: \"mouseover\",\n  onMouseUp: \"mouseup\",\n  onRadiusChanged: \"radius_changed\",\n  onRightClick: \"rightclick\"\n};\nvar updaterMap = {\n  center: function center(instance, _center) {\n    instance.setCenter(_center);\n  },\n  draggable: function draggable(instance, _draggable) {\n    instance.setDraggable(_draggable);\n  },\n  editable: function editable(instance, _editable) {\n    instance.setEditable(_editable);\n  },\n  map: function map(instance, _map) {\n    instance.setMap(_map);\n  },\n  options: function options(instance, _options) {\n    instance.setOptions(_options);\n  },\n  radius: function radius(instance, _radius) {\n    instance.setRadius(_radius);\n  },\n  visible: function visible(instance, _visible) {\n    instance.setVisible(_visible);\n  }\n};\n\nvar Circle = function (_super) {\n  __extends(Circle, _super);\n\n  function Circle() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.registeredEvents = [];\n    _this.state = {\n      circle: null\n    };\n\n    _this.setCircleCallback = function () {\n      if (_this.state.circle !== null && _this.props.onLoad) {\n        _this.props.onLoad(_this.state.circle);\n      }\n    };\n\n    return _this;\n  }\n\n  Circle.prototype.componentDidMount = function () {\n    var circle = new google.maps.Circle(__assign({}, this.props.options || {}, {\n      map: this.context\n    }));\n    this.registeredEvents = helper_1.applyUpdatersToPropsAndRegisterEvents({\n      updaterMap: updaterMap,\n      eventMap: eventMap,\n      prevProps: {},\n      nextProps: this.props,\n      instance: circle\n    });\n\n    function setCircle() {\n      return {\n        circle: circle\n      };\n    }\n\n    this.setState(setCircle, this.setCircleCallback);\n  };\n\n  Circle.prototype.componentDidUpdate = function (prevProps) {\n    if (this.state.circle !== null) {\n      helper_1.unregisterEvents(this.registeredEvents);\n      this.registeredEvents = helper_1.applyUpdatersToPropsAndRegisterEvents({\n        updaterMap: updaterMap,\n        eventMap: eventMap,\n        prevProps: prevProps,\n        nextProps: this.props,\n        instance: this.state.circle\n      });\n    }\n  };\n\n  Circle.prototype.componentWillUnmount = function () {\n    if (this.state.circle !== null) {\n      if (this.props.onUnmount) {\n        this.props.onUnmount(this.state.circle);\n      }\n\n      helper_1.unregisterEvents(this.registeredEvents);\n      this.state.circle && this.state.circle.setMap(null);\n    }\n  };\n\n  Circle.prototype.render = function () {\n    return React.createElement(React.Fragment, null);\n  };\n\n  Circle.contextType = map_context_1.default;\n  return Circle;\n}(React.PureComponent);\n\nexports.Circle = Circle;\nexports.default = Circle;","map":null,"metadata":{},"sourceType":"script"}