{"ast":null,"code":"// /*global google*/\n// import React, {} from 'react'\n// import PropTypes from 'prop-types'\n// import { Map, GoogleAPI, GoogleApiWrapper, InfoWindow, Marker} from 'google-maps-react';\n// import MarkerClusterer from '/Users/tpl9/Dev/WWTF/client/src/markerclusterer/markerclusterer.js'\n// const google=window.google\n// const evtNames = [\n//     'click',\n//     'dblclick',\n//     'dragend',\n//     'mousedown',\n//     'mouseout',\n//     'mouseover',\n//     'mouseup',\n//     'recenter',\n//   ]\n//   const markerCluster = (props) => {\n//     const {map, google, markers} = props\n//     const handleEvent = ({event, marker, entry}) => {\n//       if (props[event]) {\n//         props[event]({\n//           props: props,\n//           marker: marker,\n//           event: event,\n//           entry: entry\n//         })\n//       }\n//     }\n//     // This hook works like ComponentWillMount\n//     // The  hook isn't really needed, this whole thing worked without it,\n//     // I added the hook so that I could implement a cleanup function\n//     // useEffect(() => {\n//     //   if (map && markers) {\n//     //     const mapMarkers = markers.map((marker) => {\n//     //       const entry = new google.maps.Marker({\n//     //         position: {\n//     //           lat: marker.position.lat,\n//     //           lng: marker.position.lng\n//     //         },\n//     //         map: map,\n//     //         name: marker.name\n//     //       })\n//     //       evtNames.forEach(e => {\n//     //         entry.addListener(e, () => handleEvent({\n//     //           event: e,\n//     //           marker: marker,\n//     //           entry: entry\n//     //         }))\n//     //       })\n//     //       return entry\n//     //     })\n//     //     const clusterer = new MarkerClusterer(map, mapMarkers, {imagePath: '/markerclusterer/m'})\n//     //     // Cleanup function. Note, this is only returned if we create the markers\n//     //     return () => {\n//     //       //console.log('Cleaning up markers')\n//     //       clusterer.clearMarkers()\n//     //     }\n//     //   }\n//     // }, [map, google, markers])\n//     // Do we need to render anything??\n//     return (null)\n//   }\n//   markerCluster.propTypes = {\n//     map: PropTypes.object,\n//     google: PropTypes.object,\n//     markers: PropTypes.arrayOf(PropTypes.shape({\n//       position: PropTypes.shape({\n//         lat: PropTypes.number.isRequired,\n//         lng: PropTypes.number.isRequired,\n//       }).isRequired,\n//       name: PropTypes.string.isRequired,\n//     })),\n//   }\n//   export default markerCluster","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/MarkerCluster.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// /*global google*/\n// import React, {} from 'react'\n// import PropTypes from 'prop-types'\n// import { Map, GoogleAPI, GoogleApiWrapper, InfoWindow, Marker} from 'google-maps-react';\n// import MarkerClusterer from '/Users/tpl9/Dev/WWTF/client/src/markerclusterer/markerclusterer.js'\n\n// const google=window.google\n\n// const evtNames = [\n//     'click',\n//     'dblclick',\n//     'dragend',\n//     'mousedown',\n//     'mouseout',\n//     'mouseover',\n//     'mouseup',\n//     'recenter',\n//   ]\n\n//   const markerCluster = (props) => {\n//     const {map, google, markers} = props\n\n//     const handleEvent = ({event, marker, entry}) => {\n//       if (props[event]) {\n//         props[event]({\n//           props: props,\n//           marker: marker,\n//           event: event,\n//           entry: entry\n//         })\n//       }\n//     }\n\n//     // This hook works like ComponentWillMount\n//     // The  hook isn't really needed, this whole thing worked without it,\n//     // I added the hook so that I could implement a cleanup function\n//     // useEffect(() => {\n//     //   if (map && markers) {\n//     //     const mapMarkers = markers.map((marker) => {\n//     //       const entry = new google.maps.Marker({\n//     //         position: {\n//     //           lat: marker.position.lat,\n//     //           lng: marker.position.lng\n//     //         },\n//     //         map: map,\n//     //         name: marker.name\n//     //       })\n\n//     //       evtNames.forEach(e => {\n//     //         entry.addListener(e, () => handleEvent({\n//     //           event: e,\n//     //           marker: marker,\n//     //           entry: entry\n//     //         }))\n//     //       })\n\n//     //       return entry\n//     //     })\n\n//     //     const clusterer = new MarkerClusterer(map, mapMarkers, {imagePath: '/markerclusterer/m'})\n\n//     //     // Cleanup function. Note, this is only returned if we create the markers\n//     //     return () => {\n//     //       //console.log('Cleaning up markers')\n//     //       clusterer.clearMarkers()\n//     //     }\n//     //   }\n//     // }, [map, google, markers])\n\n\n//     // Do we need to render anything??\n//     return (null)\n\n//   }\n\n//   markerCluster.propTypes = {\n//     map: PropTypes.object,\n//     google: PropTypes.object,\n//     markers: PropTypes.arrayOf(PropTypes.shape({\n//       position: PropTypes.shape({\n//         lat: PropTypes.number.isRequired,\n//         lng: PropTypes.number.isRequired,\n//       }).isRequired,\n//       name: PropTypes.string.isRequired,\n//     })),\n//   }\n\n//   export default markerCluster"]},"metadata":{},"sourceType":"module"}