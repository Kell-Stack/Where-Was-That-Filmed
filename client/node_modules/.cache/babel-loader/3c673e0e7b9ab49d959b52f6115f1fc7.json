{"ast":null,"code":"var _jsxFileName = \"/Users/tpl9/Dev/WWTF/client/src/CurrentLoc.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Map, Marker } from 'google-maps-react';\nimport { MarkerClusterer } from '@react-google-maps/api';\n\nclass CurrentLoc extends Component {\n  constructor(props) {\n    super(props);\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // is google available?\n      const google = this.props.google;\n      const maps = google.maps;\n      console.log('👩🏽‍💻👩🏽‍💻', maps);\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let zoom = this.props.zoom;\n      const _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() constructor instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const children = this.props.children;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    //const style = Object.assign({}, {mapStylesmap});\n    // console.log('👩🏽‍💻',this.map)\n    let markers = this.props.locations.map((latlngval, idx) => {\n      return React.createElement(Marker, {\n        key: idx,\n        position: latlngval,\n        onClick: this.onMarkerClick,\n        name: this.props.locations[idx].title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      });\n    });\n\n    if (this.props.locations.length > 0) {\n      var markerCluster = new MarkerClusterer(this.map, markers, {\n        imagePath: '/markerclusterer/m'\n      });\n      console.log('😬😬😬', markerCluster, this.map, markers);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"Map.js-Div-Container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"mapComponent\",\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Loading map...\"), this.renderChildren());\n  }\n\n} //     render() {\n//         const style = Object.assign({}, mapStyles.map);\n//         return (\n//             <Map google={this.props.google} zoom={14}>\n//             {this.renderChildren()}\n//             </Map>\n//         );\n//     }\n// }\n// SF centered lat/lng from google\n\n\nCurrentLoc.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 37.7749,\n    lng: -122.4194\n  },\n  centerArroundCurrentLocation: false,\n  visible: true\n};\nexport default CurrentLoc;","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/CurrentLoc.js"],"names":["React","Component","ReactDOM","Map","Marker","MarkerClusterer","CurrentLoc","constructor","props","initialCenter","lat","lng","state","currentLocation","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","console","log","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","renderChildren","children","Children","c","cloneElement","mapCenter","render","markers","locations","latlngval","idx","onMarkerClick","title","length","markerCluster","imagePath","defaultProps","centerArroundCurrentLocation","visible"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,mBAA5B;AACA,SAASC,eAAT,QAAgC,wBAAhC;;AAGA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAC/BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,kCAGM,KAAKA,KAAL,CAAWC,aAHjB;AAAA,UAGPC,GAHO,yBAGPA,GAHO;AAAA,UAGFC,GAHE,yBAGFA,GAHE;AAIf,SAAKC,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE;AACjBH,QAAAA,GAAG,EAAEA,GADY;AAEjBC,QAAAA,GAAG,EAAEA;AAFY;AADR,KAAb;AAMH;;AAGDG,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAID,SAAS,CAACE,MAAV,KAAqB,KAAKT,KAAL,CAAWS,MAApC,EAA4C;AACxC,WAAKC,OAAL;AACH;;AACD,QAAIF,SAAS,CAACH,eAAV,KAA8B,KAAKD,KAAL,CAAWC,eAA7C,EAA8D;AAC1D,WAAKM,WAAL;AACH;AACJ;;AAEDA,EAAAA,WAAW,GAAG;AACV,UAAMC,GAAG,GAAG,KAAKA,GAAjB;AACA,UAAMC,OAAO,GAAG,KAAKT,KAAL,CAAWC,eAA3B;AAEA,UAAMI,MAAM,GAAG,KAAKT,KAAL,CAAWS,MAA1B;AACA,UAAMK,IAAI,GAAGL,MAAM,CAACK,IAApB;;AAGA,QAAIF,GAAJ,EAAS;AACL,UAAIG,MAAM,GAAG,IAAID,IAAI,CAACE,MAAT,CAAgBH,OAAO,CAACX,GAAxB,EAA6BW,OAAO,CAACV,GAArC,CAAb;AACAS,MAAAA,GAAG,CAACK,KAAJ,CAAUF,MAAV;AACH;AACJ;;AAEDG,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKlB,KAAL,CAAWmB,2BAAf,EAA4C;AACxC,UAAIC,SAAS,IAAIA,SAAS,CAACC,WAA3B,EAAwC;AACpCD,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,GAAG,IAAI;AAC5C,gBAAMC,MAAM,GAAGD,GAAG,CAACC,MAAnB;AACA,eAAKC,QAAL,CAAc;AACVpB,YAAAA,eAAe,EAAE;AACbH,cAAAA,GAAG,EAAEsB,MAAM,CAACE,QADC;AAEbvB,cAAAA,GAAG,EAAEqB,MAAM,CAACG;AAFC;AADP,WAAd;AAMH,SARD;AASH;AACJ;;AACD,SAAKjB,OAAL;AACH;;AAEDA,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKV,KAAL,IAAc,KAAKA,KAAL,CAAWS,MAA7B,EAAqC;AACrC;AADqC,YAE7BA,MAF6B,GAElB,KAAKT,KAFa,CAE7BS,MAF6B;AAGrC,YAAMK,IAAI,GAAGL,MAAM,CAACK,IAApB;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6Bf,IAA7B;AAEA,YAAMgB,MAAM,GAAG,KAAKC,IAAL,CAAUnB,GAAzB,CANqC,CAQrC;;AACA,YAAMoB,IAAI,GAAGtC,QAAQ,CAACuC,WAAT,CAAqBH,MAArB,CAAb;AATqC,UAW/BI,IAX+B,GAWtB,KAAKlC,KAXiB,CAW/BkC,IAX+B;AAAA,oCAYhB,KAAK9B,KAAL,CAAWC,eAZK;AAAA,YAY7BH,GAZ6B,yBAY7BA,GAZ6B;AAAA,YAYxBC,GAZwB,yBAYxBA,GAZwB;AAarC,YAAMY,MAAM,GAAG,IAAID,IAAI,CAACE,MAAT,CAAgBd,GAAhB,EAAqBC,GAArB,CAAf;AACA,YAAMgC,SAAS,GAAGC,MAAM,CAACC,MAAP,CACd,EADc,EAEd;AACItB,QAAAA,MAAM,EAAEA,MADZ;AAEImB,QAAAA,IAAI,EAAEA;AAFV,OAFc,CAAlB,CAdqC,CAqBrC;;AACA,WAAKtB,GAAL,GAAW,IAAIE,IAAI,CAACnB,GAAT,CAAaqC,IAAb,EAAmBG,SAAnB,CAAX;AACC;AACJ;;AAEDG,EAAAA,cAAc,GAAG;AAAA,UACLC,QADK,GACQ,KAAKvC,KADb,CACLuC,QADK;AAGb,QAAI,CAACA,QAAL,EAAe;AAEf,WAAO/C,KAAK,CAACgD,QAAN,CAAe5B,GAAf,CAAmB2B,QAAnB,EAA6BE,CAAC,IAAI;AACrC,UAAI,CAACA,CAAL,EAAQ;AACR,aAAOjD,KAAK,CAACkD,YAAN,CAAmBD,CAAnB,EAAsB;AACzB7B,QAAAA,GAAG,EAAE,KAAKA,GADe;AAEzBH,QAAAA,MAAM,EAAE,KAAKT,KAAL,CAAWS,MAFM;AAGzBkC,QAAAA,SAAS,EAAE,KAAKvC,KAAL,CAAWC;AAHG,OAAtB,CAAP;AAKH,KAPM,CAAP;AAQH;;AAEDuC,EAAAA,MAAM,GAAG;AACL;AACA;AAEA,QAAIC,OAAO,GAAG,KAAK7C,KAAL,CAAW8C,SAAX,CAAqBlC,GAArB,CAAyB,CAACmC,SAAD,EAAYC,GAAZ,KAAoB;AACvD,aAAO,oBAAC,MAAD;AACC,QAAA,GAAG,EAAEA,GADN;AAEC,QAAA,QAAQ,EAAED,SAFX;AAGC,QAAA,OAAO,EAAE,KAAKE,aAHf;AAIC,QAAA,IAAI,EAAE,KAAKjD,KAAL,CAAW8C,SAAX,CAAqBE,GAArB,EAA0BE,KAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAKH,KANa,CAAd;;AAQA,QAAI,KAAKlD,KAAL,CAAW8C,SAAX,CAAqBK,MAArB,GAA8B,CAAlC,EAAqC;AACjC,UAAIC,aAAa,GAAG,IAAIvD,eAAJ,CAAoB,KAAKe,GAAzB,EAA8BiC,OAA9B,EAChB;AAACQ,QAAAA,SAAS,EAAE;AAAZ,OADgB,CAApB;AAEIzB,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBuB,aAArB,EAAoC,KAAKxC,GAAzC,EAA8CiC,OAA9C;AACP;;AAED,WACI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,GAAG,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAIK,KAAKP,cAAL,EAJL,CADJ;AASH;;AA3H8B,C,CA+HnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACAxC,UAAU,CAACwD,YAAX,GAA0B;AACtBpB,EAAAA,IAAI,EAAE,EADgB;AAEtBjC,EAAAA,aAAa,EAAE;AACbC,IAAAA,GAAG,EAAE,OADQ;AAEbC,IAAAA,GAAG,EAAE,CAAC;AAFO,GAFO;AAMtBoD,EAAAA,4BAA4B,EAAE,KANR;AAOtBC,EAAAA,OAAO,EAAE;AAPa,CAA1B;AAUG,eAAe1D,UAAf","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport { Map, Marker } from 'google-maps-react';\nimport { MarkerClusterer } from '@react-google-maps/api';\n\n\nclass CurrentLoc extends Component {\n    constructor(props) {\n        super(props);\n\n        const { lat, lng } = this.props.initialCenter;\n        this.state = {\n            currentLocation: {\n            lat: lat,\n            lng: lng,\n            }\n        };\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n    }\n\n    recenterMap() {\n        const map = this.map;\n        const current = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n\n        if (map) {\n            let center = new maps.LatLng(current.lat, current.lng);\n            map.panTo(center);\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.centerAroundCurrentLocation) {\n            if (navigator && navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(pos => {\n                    const coords = pos.coords;\n                    this.setState({\n                        currentLocation: {\n                            lat: coords.latitude,\n                            lng: coords.longitude\n                        }\n                    });\n                });\n            }\n        }\n        this.loadMap();\n    }\n\n    loadMap() {\n        if (this.props && this.props.google) {\n        // is google available?\n        const { google } = this.props;\n        const maps = google.maps;\n        console.log('👩🏽‍💻👩🏽‍💻',maps)\n\n        const mapRef = this.refs.map;\n\n        // reference to the actual DOM element\n        const node = ReactDOM.findDOMNode(mapRef);\n\n        let { zoom } = this.props;\n        const { lat, lng } = this.state.currentLocation;\n        const center = new maps.LatLng(lat, lng);\n        const mapConfig = Object.assign(\n            {},\n            {\n                center: center,\n                zoom: zoom\n            }\n        );\n        // maps.Map() constructor instantiates the map\n        this.map = new maps.Map(node, mapConfig);\n        }\n    }\n\n    renderChildren() {\n        const { children } = this.props;\n\n        if (!children) return;\n\n        return React.Children.map(children, c => {\n            if (!c) return;\n            return React.cloneElement(c, {\n                map: this.map,\n                google: this.props.google,\n                mapCenter: this.state.currentLocation\n            });\n        });\n    }\n\n    render() {\n        //const style = Object.assign({}, {mapStylesmap});\n        // console.log('👩🏽‍💻',this.map)\n\n        let markers = this.props.locations.map((latlngval, idx) => {\n            return <Marker\n                    key={idx}\n                    position={latlngval}\n                    onClick={this.onMarkerClick}\n                    name={this.props.locations[idx].title}/>\n        })\n\n        if (this.props.locations.length > 0) {\n            var markerCluster = new MarkerClusterer(this.map, markers,\n                {imagePath: '/markerclusterer/m'});\n                console.log('😬😬😬',markerCluster, this.map, markers)\n        }\n\n        return (\n            <div className='Map.js-Div-Container'>\n                <div id=\"mapComponent\" ref=\"map\">\n                    Loading map...\n                </div>\n                {this.renderChildren()}\n\n            </div>\n        );\n    }\n}\n\n\n//     render() {\n//         const style = Object.assign({}, mapStyles.map);\n//         return (\n//             <Map google={this.props.google} zoom={14}>\n//             {this.renderChildren()}\n//             </Map>\n//         );\n//     }\n// }\n\n\n// SF centered lat/lng from google\nCurrentLoc.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n      lat: 37.7749,\n      lng: -122.4194\n    },\n    centerArroundCurrentLocation: false,\n    visible: true\n};\n\n   export default CurrentLoc;"]},"metadata":{},"sourceType":"module"}