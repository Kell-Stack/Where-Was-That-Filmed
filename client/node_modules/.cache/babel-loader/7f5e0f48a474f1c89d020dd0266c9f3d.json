{"ast":null,"code":"var _jsxFileName = \"/Users/tpl9/Dev/WWTF/client/src/Search.js\";\nimport React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap'; // SEARCH ACTORS\n//   const searchInput = () => {\n//     let actors = client.query('SELECT id, locations FROM media;')\n//     var currentActors = actors\n//     var ul = document.getElementById(\"actors\")\n//     setActors()\n//     function setActors() {\n//     \tul.innerHTML = '';\n//     \tfor (var actorIndex in currentActors) {\n//           var li = document.createElement(\"li\")\n//           li.textContent = currentActors[actorIndex]\n//           ul.appendChild(li)\n//       }\n//     }\n// }\n// if searchActors doesn't return a query, then i want to searchTitles\n//\n// const inputQuery = () => {\n// }\n\nclass SearchBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      onInput: []\n    };\n    this.search = this.search.bind(this);\n  } // componentDidMount () {\n  //    /* event listener */\n  //    document.getElementById(\"SearchBox\").addEventListener('input', onInput);\n  // }\n  // onInput () {\n  //   currentActors = actors.filter((actor) =>{\n  //       //return actor.toLowerCase().startsWith(this.value.toLowerCase())\n  //       return actor.toLowerCase().indexOf(this.value.toLowerCase()) !!= -1\n  //   })\n  //   setActors()\n  // }\n\n\n  search(e) {\n    var userInput = this.state.query;\n    console.log(\"üÜí\", userInput);\n    let encodeInput = encodeURI(userInput);\n    console.log(\"‚è´\", encodeInput); // debugger;\n\n    window.location.pathname = \"/search/\" + encodeInput;\n  }\n\n  render() {\n    return React.createElement(Form, {\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"searchBox\",\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Search\"), React.createElement(Input, {\n      type: \"\",\n      name: \"\",\n      id: \"SearchBox\",\n      placeholder: \"\",\n      onChange: event => {\n        this.setState({\n          query: event.target.value\n        });\n        console.log(\"jsfjdfgevfas flbwlubcwbasjdhbjc\", event.target.value);\n      },\n      onKeyPress: event => {\n        console.log(\"helololol,\", event.key);\n\n        if (event.key === \"Enter\") {\n          event.preventDefault();\n          this.search();\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), ' ', React.createElement(Button, {\n      onClick: this.search,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Search\"));\n  }\n\n}\n\nexport default SearchBox;","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/Search.js"],"names":["React","Button","Form","FormGroup","Label","Input","SearchBox","Component","constructor","props","state","onInput","search","bind","e","userInput","query","console","log","encodeInput","encodeURI","window","location","pathname","render","event","setState","target","value","key","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,KAAzC,QAAsD,YAAtD,C,CACA;AAEA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AAEA,MAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACE,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGA,SAAKC,MAAL,GAAY,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAZ;AAEH,GARqC,CAStC;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACF;;;AACED,EAAAA,MAAM,CAACE,CAAD,EAAI;AAER,QAAIC,SAAS,GAAG,KAAKL,KAAL,CAAWM,KAA3B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBH,SAAlB;AACA,QAAII,WAAW,GAAGC,SAAS,CAACL,SAAD,CAA3B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBC,WAAhB,EALQ,CAMR;;AACAE,IAAAA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA2B,aAAaJ,WAAxC;AAED;;AACDK,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,IAAD;AAAM,MAAA,MAAM,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,WAAX;AAAuB,MAAA,MAAM,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,EAAZ;AAAe,MAAA,IAAI,EAAC,EAApB;AAAuB,MAAA,EAAE,EAAC,WAA1B;AAAsC,MAAA,WAAW,EAAC,EAAlD;AAAsD,MAAA,QAAQ,EAAEC,KAAK,IAAI;AAAC,aAAKC,QAAL,CAAc;AAACV,UAAAA,KAAK,EAACS,KAAK,CAACE,MAAN,CAAaC;AAApB,SAAd;AAC1EX,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA8CO,KAAK,CAACE,MAAN,CAAaC,KAA3D;AAAkE,OADlE;AAGsD,MAAA,UAAU,EAAEH,KAAK,IAAI;AACnBR,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBO,KAAK,CAACI,GAA/B;;AACA,YAAIJ,KAAK,CAACI,GAAN,KAAc,OAAlB,EAA2B;AACzBJ,UAAAA,KAAK,CAACK,cAAN;AACA,eAAKlB,MAAL;AACD;AAAC,OAR1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAaG,GAbH,EAcE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKA,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF,CADF;AAkBD;;AAnDqC;;AAsDxC,eAAeN,SAAf","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n// SEARCH ACTORS\n\n//   const searchInput = () => {\n\n//     let actors = client.query('SELECT id, locations FROM media;')\n//     var currentActors = actors\n\n//     var ul = document.getElementById(\"actors\")\n\n\n//     setActors()\n\n//     function setActors() {\n//     \tul.innerHTML = '';\n\n//     \tfor (var actorIndex in currentActors) {\n//           var li = document.createElement(\"li\")\n//           li.textContent = currentActors[actorIndex]\n//           ul.appendChild(li)\n//       }\n//     }\n\n// }\n\n// if searchActors doesn't return a query, then i want to searchTitles\n//\n\n// const inputQuery = () => {\n// }\n\nclass SearchBox extends React.Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        onInput: []\n      }\n      this.search=this.search.bind(this)\n\n  }\n  // componentDidMount () {\n  //    /* event listener */\n  //    document.getElementById(\"SearchBox\").addEventListener('input', onInput);\n\n  // }\n\n  // onInput () {\n  //   currentActors = actors.filter((actor) =>{\n  //       //return actor.toLowerCase().startsWith(this.value.toLowerCase())\n  //       return actor.toLowerCase().indexOf(this.value.toLowerCase()) !!= -1\n  //   })\n  //   setActors()\n// }\n  search(e) {\n\n    var userInput = this.state.query\n    console.log(\"üÜí\", userInput)\n    let encodeInput = encodeURI(userInput)\n    console.log(\"‚è´\",encodeInput)\n    // debugger;\n    window.location.pathname = \"/search/\" + encodeInput\n\n  }\n  render() {\n    return (\n      <Form inline>\n        <FormGroup>\n          <Label for=\"searchBox\" hidden>Search</Label>\n          <Input type=\"\" name=\"\" id=\"SearchBox\" placeholder=\"\"  onChange={event => {this.setState({query:event.target.value})\n          console.log(\"jsfjdfgevfas flbwlubcwbasjdhbjc\",event.target.value)}}\n\n                                                                onKeyPress={event => {\n                                                                  console.log(\"helololol,\",event.key)\n                                                                  if (event.key === \"Enter\") {\n                                                                    event.preventDefault();\n                                                                    this.search ()\n                                                                  }}}/>\n        </FormGroup>\n        {' '}\n        <Button onClick={this.search}>Search</Button>\n      </Form>\n    );\n  }\n}\n\nexport default SearchBox;\n"]},"metadata":{},"sourceType":"module"}