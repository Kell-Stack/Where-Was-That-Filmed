{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar helper_1 = require(\"../../utils/helper\");\n\nvar map_context_1 = require(\"../../map-context\");\n\nvar eventMap = {\n  onAnimationChanged: \"animation_changed\",\n  onClick: \"click\",\n  onClickableChanged: \"clickable_changed\",\n  onCursorChanged: \"cursor_changed\",\n  onDblClick: \"dblclick\",\n  onDrag: \"drag\",\n  onDragEnd: \"dragend\",\n  onDraggableChanged: \"draggable_changed\",\n  onDragStart: \"dragstart\",\n  onFlatChanged: \"flat_changed\",\n  onIconChanged: \"icon_changed\",\n  onMouseDown: \"mousedown\",\n  onMouseOut: \"mouseout\",\n  onMouseOver: \"mouseover\",\n  onMouseUp: \"mouseup\",\n  onPositionChanged: \"position_changed\",\n  onRightClick: \"rightclick\",\n  onShapeChanged: \"shape_changed\",\n  onTitleChanged: \"title_changed\",\n  onVisibleChanged: \"visible_changed\",\n  onZindexChanged: \"zindex_changed\"\n};\nvar updaterMap = {\n  animation: function animation(instance, _animation) {\n    instance.setAnimation(_animation);\n  },\n  clickable: function clickable(instance, _clickable) {\n    instance.setClickable(_clickable);\n  },\n  cursor: function cursor(instance, _cursor) {\n    instance.setCursor(_cursor);\n  },\n  draggable: function draggable(instance, _draggable) {\n    instance.setDraggable(_draggable);\n  },\n  icon: function icon(instance, _icon) {\n    instance.setIcon(_icon);\n  },\n  label: function label(instance, _label) {\n    instance.setLabel(_label);\n  },\n  map: function map(instance, _map) {\n    instance.setMap(_map);\n  },\n  opacity: function opacity(instance, _opacity) {\n    instance.setOpacity(_opacity);\n  },\n  options: function options(instance, _options) {\n    instance.setOptions(_options);\n  },\n  position: function position(instance, _position) {\n    instance.setPosition(_position);\n  },\n  shape: function shape(instance, _shape) {\n    instance.setShape(_shape);\n  },\n  title: function title(instance, _title) {\n    instance.setTitle(_title);\n  },\n  visible: function visible(instance, _visible) {\n    instance.setVisible(_visible);\n  },\n  zIndex: function zIndex(instance, _zIndex) {\n    instance.setZIndex(_zIndex);\n  }\n};\n\nvar Marker = function (_super) {\n  __extends(Marker, _super);\n\n  function Marker() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.registeredEvents = [];\n    _this.state = {\n      marker: null\n    };\n\n    _this.setMarkerCallback = function () {\n      if (_this.state.marker !== null && _this.props.onLoad) {\n        _this.props.onLoad(_this.state.marker);\n      }\n    };\n\n    return _this;\n  }\n\n  Marker.prototype.componentDidMount = function () {\n    var markerOptions = __assign({}, this.props.options || {}, this.props.clusterer ? {} : {\n      map: this.context\n    }, {\n      position: this.props.position\n    });\n\n    var marker = new google.maps.Marker(markerOptions);\n\n    if (this.props.clusterer) {\n      this.props.clusterer.addMarker(marker, !!this.props.noClustererRedraw);\n    } else {\n      marker.setMap(this.context);\n    }\n\n    this.registeredEvents = helper_1.applyUpdatersToPropsAndRegisterEvents({\n      updaterMap: updaterMap,\n      eventMap: eventMap,\n      prevProps: {},\n      nextProps: this.props,\n      instance: marker\n    });\n\n    function setMarker() {\n      return {\n        marker: marker\n      };\n    }\n\n    this.setState(setMarker, this.setMarkerCallback);\n  };\n\n  Marker.prototype.componentDidUpdate = function (prevProps) {\n    if (this.state.marker !== null) {\n      helper_1.unregisterEvents(this.registeredEvents);\n      this.registeredEvents = helper_1.applyUpdatersToPropsAndRegisterEvents({\n        updaterMap: updaterMap,\n        eventMap: eventMap,\n        prevProps: prevProps,\n        nextProps: this.props,\n        instance: this.state.marker\n      });\n    }\n  };\n\n  Marker.prototype.componentWillUnmount = function () {\n    if (this.state.marker !== null) {\n      if (this.props.onUnmount) {\n        this.props.onUnmount(this.state.marker);\n      }\n\n      helper_1.unregisterEvents(this.registeredEvents);\n\n      if (this.props.clusterer) {\n        this.props.clusterer.removeMarker(this.state.marker, !!this.props.noClustererRedraw);\n      } else {\n        this.state.marker && this.state.marker.setMap(null);\n      }\n    }\n  };\n\n  Marker.prototype.render = function () {\n    return this.props.children || null;\n  };\n\n  Marker.contextType = map_context_1.default;\n  return Marker;\n}(React.PureComponent);\n\nexports.Marker = Marker;\nexports.default = Marker;","map":null,"metadata":{},"sourceType":"script"}