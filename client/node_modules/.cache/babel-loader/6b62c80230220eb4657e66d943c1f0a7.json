{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_dom_1 = require(\"react-dom\");\n\nvar helper_1 = require(\"../../utils/helper\");\n\nvar map_context_1 = require(\"../../map-context\");\n\nvar invariant_1 = require(\"invariant\");\n\nvar eventMap = {\n  onCloseClick: \"closeclick\",\n  onContentChanged: \"content_changed\",\n  onDomReady: \"domready\",\n  onPositionChanged: \"position_changed\",\n  onZindexChanged: \"zindex_changed\"\n};\nvar updaterMap = {\n  options: function options(instance, _options) {\n    instance.setOptions(_options);\n  },\n  position: function position(instance, _position) {\n    instance.setPosition(_position);\n  },\n  zIndex: function zIndex(instance, _zIndex) {\n    instance.setZIndex(_zIndex);\n  }\n};\n\nvar InfoWindow = function (_super) {\n  __extends(InfoWindow, _super);\n\n  function InfoWindow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.registeredEvents = [];\n    _this.containerElement = null;\n    _this.state = {\n      infoWindow: null\n    };\n\n    _this.open = function (infoWindow, anchor) {\n      if (anchor) {\n        infoWindow.open(_this.context, anchor);\n      } else if (infoWindow.getPosition()) {\n        infoWindow.open(_this.context);\n      } else {\n        invariant_1.default(false, \"You must provide either an anchor (typically render it inside a <Marker>) or a position props for <InfoWindow>.\");\n      }\n    };\n\n    _this.setInfowindowCallback = function () {\n      if (_this.state.infoWindow !== null && _this.containerElement !== null) {\n        _this.state.infoWindow.setContent(_this.containerElement);\n\n        _this.open(_this.state.infoWindow, _this.props.anchor);\n\n        if (_this.props.onLoad) {\n          _this.props.onLoad(_this.state.infoWindow);\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  InfoWindow.prototype.componentDidMount = function () {\n    var infoWindow = new google.maps.InfoWindow(__assign({}, this.props.options || {}));\n    this.containerElement = document.createElement(\"div\");\n    this.registeredEvents = helper_1.applyUpdatersToPropsAndRegisterEvents({\n      updaterMap: updaterMap,\n      eventMap: eventMap,\n      prevProps: {},\n      nextProps: this.props,\n      instance: infoWindow\n    });\n\n    function setInfoWindow() {\n      return {\n        infoWindow: infoWindow\n      };\n    }\n\n    this.setState(setInfoWindow, this.setInfowindowCallback);\n  };\n\n  InfoWindow.prototype.componentDidUpdate = function (prevProps) {\n    if (this.state.infoWindow !== null) {\n      helper_1.unregisterEvents(this.registeredEvents);\n      this.registeredEvents = helper_1.applyUpdatersToPropsAndRegisterEvents({\n        updaterMap: updaterMap,\n        eventMap: eventMap,\n        prevProps: prevProps,\n        nextProps: this.props,\n        instance: this.state.infoWindow\n      });\n    }\n  };\n\n  InfoWindow.prototype.componentWillUnmount = function () {\n    if (this.state.infoWindow !== null) {\n      helper_1.unregisterEvents(this.registeredEvents);\n      this.state.infoWindow.close();\n    }\n  };\n\n  InfoWindow.prototype.render = function () {\n    return this.containerElement ? react_dom_1.createPortal(React.Children.only(this.props.children), this.containerElement) : React.createElement(React.Fragment, null);\n  };\n\n  InfoWindow.contextType = map_context_1.default;\n  return InfoWindow;\n}(React.PureComponent);\n\nexports.InfoWindow = InfoWindow;\nexports.default = InfoWindow;","map":null,"metadata":{},"sourceType":"script"}