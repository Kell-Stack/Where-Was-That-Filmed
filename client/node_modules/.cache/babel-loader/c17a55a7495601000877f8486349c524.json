{"ast":null,"code":"var _jsxFileName = \"/Users/tpl9/Dev/WWTF/client/src/MarkerCluster.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MarkerClusterer from 'node-js-marker-clusterer';\n\nclass GoogleMap extends Component {\n  componentDidMount() {\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.google !== this.props.google || prevProps.locations !== this.props.locations) {\n      this.loadMap();\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      const google = this.props.google;\n      const node = this.mapRef;\n      const mapConfig = Object.assign({}, {\n        center: {\n          lat: this.props.settings.defaultLatitude,\n          lng: this.props.settings.defaultLongitude\n        },\n        zoom: this.props.settings.zoom,\n        mapTypeControl: false,\n        streetViewControl: false,\n        gestureHandling: 'cooperative'\n      });\n      this.map = new google.maps.Map(node, mapConfig);\n      const infowindow = new google.maps.InfoWindow({\n        content: this.props.labels.loading\n      });\n      const markers = this.props.locations.map(location => {\n        const marker = new google.maps.Marker({\n          position: {\n            lat: location.lat,\n            lng: location.lng\n          },\n          map: this.map,\n          content: \"<div class=\\\"c-maps__callout\\\">\\n            ...\\n          </div>\",\n          icon: '/static/assets/icon-mapmarker.png'\n        });\n\n        if (location.isOpen) {\n          setTimeout(() => {\n            infowindow.setContent(marker.content);\n            infowindow.open(this.map, marker);\n          }, 1000);\n        }\n\n        google.maps.event.addListener(marker, 'click', () => {\n          infowindow.setContent(marker.content);\n          infowindow.open(this.map, marker);\n        });\n        return marker;\n      });\n      return new MarkerClusterer(this.map, markers, {\n        styles: [{\n          width: 40,\n          height: 40,\n          url: '/static/assets/icon-markercluster1.png',\n          textColor: 'white'\n        }]\n      });\n    }\n\n    return {};\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"c-maps\",\n      ref: e => {\n        this.mapRef = e;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/MarkerCluster.js"],"names":["React","Component","PropTypes","MarkerClusterer","GoogleMap","componentDidMount","loadMap","componentDidUpdate","prevProps","google","props","locations","node","mapRef","mapConfig","Object","assign","center","lat","settings","defaultLatitude","lng","defaultLongitude","zoom","mapTypeControl","streetViewControl","gestureHandling","map","maps","Map","infowindow","InfoWindow","content","labels","loading","markers","location","marker","Marker","position","icon","isOpen","setTimeout","setContent","open","event","addListener","styles","width","height","url","textColor","render","e"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport MarkerClusterer from 'node-js-marker-clusterer';\n\nclass GoogleMap extends Component {\n  componentDidMount() {\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.google !== this.props.google || prevProps.locations !== this.props.locations) {\n      this.loadMap();\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      const { google } = this.props;\n      const node = this.mapRef;\n      const mapConfig = Object.assign({}, {\n        center: { lat: this.props.settings.defaultLatitude, lng: this.props.settings.defaultLongitude },\n        zoom: this.props.settings.zoom,\n        mapTypeControl: false,\n        streetViewControl: false,\n        gestureHandling: 'cooperative',\n      });\n\n      this.map = new google.maps.Map(node, mapConfig);\n\n      const infowindow = new google.maps.InfoWindow({\n        content: this.props.labels.loading,\n      });\n\n      const markers = this.props.locations.map((location) => {\n        const marker = new google.maps.Marker({\n          position: { lat: location.lat, lng: location.lng },\n          map: this.map,\n          content: `<div class=\"c-maps__callout\">\n            ...\n          </div>`,\n          icon: '/static/assets/icon-mapmarker.png',\n        });\n\n        if (location.isOpen) {\n          setTimeout(() => {\n            infowindow.setContent(marker.content);\n            infowindow.open(this.map, marker);\n          }, 1000);\n        }\n\n        google.maps.event.addListener(marker, 'click', () => {\n          infowindow.setContent(marker.content);\n          infowindow.open(this.map, marker);\n        });\n\n        return marker;\n      });\n\n      return new MarkerClusterer(\n        this.map,\n        markers,\n        {\n          styles: [{\n            width: 40,\n            height: 40,\n            url: '/static/assets/icon-markercluster1.png',\n            textColor: 'white',\n          }],\n        },\n      );\n    }\n\n    return {};\n  }\n\n  render() {\n    return (\n      <div\n        className=\"c-maps\"\n        ref={(e) => {\n          this.mapRef = e;\n        }}\n      />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}