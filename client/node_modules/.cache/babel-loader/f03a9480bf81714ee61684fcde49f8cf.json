{"ast":null,"code":"/*global google*/\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map, GoogleAPI, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport MarkerClusterer from '/Users/tpl9/Dev/WWTF/client/src/markerclusterer/markerclusterer.js'; //const google=window.google\n\nconst evtNames = ['click', 'dblclick', 'dragend', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'recenter'];\n\nconst MarkerCluster = props => {\n  console.log(\"doooot\", props.markers);\n  const map = props.map,\n        google = props.google,\n        markers = props.markers;\n\n  const handleEvent = ({\n    event,\n    marker,\n    entry\n  }) => {\n    if (props[event]) {\n      props[event]({\n        props: props,\n        marker: marker,\n        event: event,\n        entry: entry\n      });\n    }\n  };\n\n  if (map && markers) {\n    const mapMarkers = markers.map(marker => {\n      const entry = new google.maps.Marker({\n        position: {\n          lat: marker.position.lat,\n          lng: marker.position.lng\n        },\n        map: map,\n        name: marker.name\n      });\n      evtNames.forEach(e => {\n        entry.addListener(e, () => handleEvent({\n          event: e,\n          marker: marker,\n          entry: entry\n        }));\n      });\n      return entry;\n    });\n    const clusterer = new MarkerClusterer(map, mapMarkers, {\n      imagePath: './markerclusterer/m'\n    });\n    return clusterer;\n  } // This hook works like ComponentWillMount\n  // The  hook isn't really needed, this whole thing worked without it,\n  // I added the hook so that I could implement a cleanup function\n  // useEffect(() => {\n  //   if (map && markers) {\n  //     const mapMarkers = markers.map((marker) => {\n  //       const entry = new google.maps.Marker({\n  //         position: {\n  //           lat: marker.position.lat,\n  //           lng: marker.position.lng\n  //         },\n  //         map: map,\n  //         name: marker.name\n  //       })\n  //       evtNames.forEach(e => {\n  //         entry.addListener(e, () => handleEvent({\n  //           event: e,\n  //           marker: marker,\n  //           entry: entry\n  //         }))\n  //       })\n  //       return entry\n  //     })\n  //     const clusterer = new MarkerClusterer(map, mapMarkers, {imagePath: '/markerclusterer/m'})\n  //     // Cleanup function. Note, this is only returned if we create the markers\n  //     return () => {\n  //       //console.log('Cleaning up markers')\n  //       clusterer.clearMarkers()\n  //     }\n  //   }\n  // }, [map, google, markers])\n  // Do we need to render anything??\n\n\n  return null;\n};\n\nMarkerCluster.propTypes = {\n  map: PropTypes.object,\n  google: PropTypes.object,\n  markers: PropTypes.arrayOf(PropTypes.shape({\n    position: PropTypes.shape({\n      lat: PropTypes.number.isRequired,\n      lng: PropTypes.number.isRequired\n    }).isRequired,\n    name: PropTypes.string.isRequired\n  }))\n};\nexport default MarkerCluster;","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/MarkerCluster.js"],"names":["React","useEffect","PropTypes","Map","GoogleAPI","GoogleApiWrapper","InfoWindow","Marker","MarkerClusterer","evtNames","MarkerCluster","props","console","log","markers","map","google","handleEvent","event","marker","entry","mapMarkers","maps","position","lat","lng","name","forEach","e","addListener","clusterer","imagePath","propTypes","object","arrayOf","shape","number","isRequired","string"],"mappings":"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","sourcesContent":["/*global google*/\nimport React, {useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport { Map, GoogleAPI, GoogleApiWrapper, InfoWindow, Marker} from 'google-maps-react';\nimport MarkerClusterer from '/Users/tpl9/Dev/WWTF/client/src/markerclusterer/markerclusterer.js'\n\n//const google=window.google\n\nconst evtNames = [\n    'click',\n    'dblclick',\n    'dragend',\n    'mousedown',\n    'mouseout',\n    'mouseover',\n    'mouseup',\n    'recenter',\n  ]\n\n  const MarkerCluster = (props) => {\n    console.log(\"doooot\",props.markers)\n\n    const {map, google, markers} = props\n\n    const handleEvent = ({event, marker, entry}) => {\n      if (props[event]) {\n        props[event]({\n          props: props,\n          marker: marker,\n          event: event,\n          entry: entry\n        })\n      }\n    }\n\n      if (map && markers) {\n        const mapMarkers = markers.map((marker) => {\n          const entry = new google.maps.Marker({\n            position: {\n              lat: marker.position.lat,\n              lng: marker.position.lng\n            },\n            map: map,\n            name: marker.name\n          })\n\n          evtNames.forEach(e => {\n            entry.addListener(e, () => handleEvent({\n              event: e,\n              marker: marker,\n              entry: entry\n            }))\n          })\n\n          return entry\n        })\n\n        const clusterer = new MarkerClusterer(map, mapMarkers, {imagePath: './markerclusterer/m'})\n\n        return clusterer\n      }\n\n    // This hook works like ComponentWillMount\n    // The  hook isn't really needed, this whole thing worked without it,\n    // I added the hook so that I could implement a cleanup function\n    // useEffect(() => {\n    //   if (map && markers) {\n    //     const mapMarkers = markers.map((marker) => {\n    //       const entry = new google.maps.Marker({\n    //         position: {\n    //           lat: marker.position.lat,\n    //           lng: marker.position.lng\n    //         },\n    //         map: map,\n    //         name: marker.name\n    //       })\n\n    //       evtNames.forEach(e => {\n    //         entry.addListener(e, () => handleEvent({\n    //           event: e,\n    //           marker: marker,\n    //           entry: entry\n    //         }))\n    //       })\n\n    //       return entry\n    //     })\n\n    //     const clusterer = new MarkerClusterer(map, mapMarkers, {imagePath: '/markerclusterer/m'})\n\n    //     // Cleanup function. Note, this is only returned if we create the markers\n    //     return () => {\n    //       //console.log('Cleaning up markers')\n    //       clusterer.clearMarkers()\n    //     }\n    //   }\n    // }, [map, google, markers])\n\n\n    // Do we need to render anything??\n    return (null)\n\n  }\n\n  MarkerCluster.propTypes = {\n    map: PropTypes.object,\n    google: PropTypes.object,\n    markers: PropTypes.arrayOf(PropTypes.shape({\n      position: PropTypes.shape({\n        lat: PropTypes.number.isRequired,\n        lng: PropTypes.number.isRequired,\n      }).isRequired,\n      name: PropTypes.string.isRequired,\n    })),\n  }\n\n  export default MarkerCluster"]},"metadata":{},"sourceType":"module"}