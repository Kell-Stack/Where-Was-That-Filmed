{"ast":null,"code":"var _jsxFileName = \"/Users/tpl9/Dev/WWTF/client/src/CurrentLoc.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Map, Marker } from 'google-maps-react';\n\nclass CurrentLoc extends Component {\n  // constructor(props) {\n  //     super(props);\n  //     const { lat, lng } = this.props.initialCenter;\n  //     this.state = {\n  //         currentLocation: {\n  //         lat: lat,\n  //         lng: lng,\n  //         }\n  //     };\n  // }\n  // componentDidUpdate(prevProps, prevState) {\n  //     if (prevProps.google !== this.props.google) {\n  //         this.loadMap();\n  //     }\n  //     if (prevState.currentLocation !== this.state.currentLocation) {\n  //         this.recenterMap();\n  //     }\n  // }\n  // recenterMap() {\n  //     const map = this.map;\n  //     const current = this.state.currentLocation;\n  //     const google = this.props.google;\n  //     const maps = google.maps;\n  //     if (map) {\n  //         let center = new maps.LatLng(current.lat, current.lng);\n  //         map.panTo(center);\n  //     }\n  // }\n  // componentDidMount() {\n  //     if (this.props.centerAroundCurrentLocation) {\n  //         if (navigator && navigator.geolocation) {\n  //             navigator.geolocation.getCurrentPosition(pos => {\n  //                 const coords = pos.coords;\n  //                 this.setState({\n  //                     currentLocation: {\n  //                         lat: coords.latitude,\n  //                         lng: coords.longitude\n  //                     }\n  //                 });\n  //             });\n  //         }\n  //     }\n  //     this.loadMap();\n  // }\n  // loadMap() {\n  //     if (this.props && this.props.google) {\n  //     // is google available?\n  //     const { google } = this.props;\n  //     const maps = google.maps;\n  //     console.log('👩🏽‍💻👩🏽‍💻',maps)\n  //     const mapRef = this.refs.map;\n  //     // reference to the actual DOM element\n  //     const node = ReactDOM.findDOMNode(mapRef);\n  //     let { zoom } = this.props;\n  //     const { lat, lng } = this.state.currentLocation;\n  //     const center = new maps.LatLng(lat, lng);\n  //     const mapConfig = Object.assign(\n  //         {},\n  //         {\n  //             center: center,\n  //             zoom: zoom\n  //         }\n  //     );\n  //     // maps.Map() constructor instantiates the map\n  //     this.map = new maps.Map(node, mapConfig);\n  //     }\n  // }\n  // renderChildren() {\n  //     const { children } = this.props;\n  //     if (!children) return;\n  //     return React.Children.map(children, c => {\n  //         if (!c) return;\n  //         return React.cloneElement(c, {\n  //             map: this.map,\n  //             google: this.props.google,\n  //             mapCenter: this.state.currentLocation\n  //         });\n  //     });\n  // }\n  render() {\n    //const style = Object.assign({}, {mapStylesmap});\n    // console.log('👩🏽‍💻',this.map)\n    if (this.props.locations.length > 0) {//var markerCluster = new MarkerClusterer(this.map, markers,\n      //{imagePath: '/markerclusterer/m'});\n      //console.log('😬😬😬', this.map, markers)\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(GoogleMap, {\n      id: \"marker-example\",\n      mapContainerStyle: {\n        height: \"400px\",\n        width: \"800px\"\n      },\n      zoom: 3,\n      center: {\n        lat: -37.122,\n        lng: -122\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(MarkerClusterer, {\n      options: {\n        imagePath: \"/markerclusterer/m\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, clusterer => [{\n      lat: -31.563910,\n      lng: 147.154312\n    }, {\n      lat: -33.718234,\n      lng: 150.363181\n    }, {\n      lat: -33.727111,\n      lng: 150.371124\n    }, {\n      lat: -33.848588,\n      lng: 151.209834\n    }, {\n      lat: -33.851702,\n      lng: 151.216968\n    }, {\n      lat: -34.671264,\n      lng: 150.863657\n    }, {\n      lat: -35.304724,\n      lng: 148.662905\n    }, {\n      lat: -36.817685,\n      lng: 175.699196\n    }, {\n      lat: -36.828611,\n      lng: 175.790222\n    }, {\n      lat: -37.750000,\n      lng: 145.116667\n    }, {\n      lat: -37.759859,\n      lng: 145.128708\n    }, {\n      lat: -37.765015,\n      lng: 145.133858\n    }, {\n      lat: -37.770104,\n      lng: 145.143299\n    }, {\n      lat: -37.773700,\n      lng: 145.145187\n    }, {\n      lat: -37.774785,\n      lng: 145.137978\n    }, {\n      lat: -37.819616,\n      lng: 144.968119\n    }, {\n      lat: -38.330766,\n      lng: 144.695692\n    }, {\n      lat: -39.927193,\n      lng: 175.053218\n    }, {\n      lat: -41.330162,\n      lng: 174.865694\n    }, {\n      lat: -42.734358,\n      lng: 147.439506\n    }, {\n      lat: -42.734358,\n      lng: 147.501315\n    }, {\n      lat: -42.735258,\n      lng: 147.438000\n    }, {\n      lat: -43.999792,\n      lng: 170.463352\n    }].map((location, i) => React.createElement(Marker, {\n      key: i,\n      position: location,\n      clusterer: clusterer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })))));\n  }\n\n} //     render() {\n//         const style = Object.assign({}, mapStyles.map);\n//         return (\n//             <Map google={this.props.google} zoom={14}>\n//             {this.renderChildren()}\n//             </Map>\n//         );\n//     }\n// }\n// SF centered lat/lng from google\n\n\nCurrentLoc.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 37.7749,\n    lng: -122.4194\n  },\n  centerArroundCurrentLocation: false,\n  visible: true\n};\nexport default CurrentLoc;","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/CurrentLoc.js"],"names":["React","Component","ReactDOM","Map","Marker","CurrentLoc","render","props","locations","length","height","width","lat","lng","imagePath","clusterer","map","location","i","defaultProps","zoom","initialCenter","centerArroundCurrentLocation","visible"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport { Map, Marker } from 'google-maps-react';\n\nclass CurrentLoc extends Component {\n    // constructor(props) {\n    //     super(props);\n\n    //     const { lat, lng } = this.props.initialCenter;\n    //     this.state = {\n    //         currentLocation: {\n    //         lat: lat,\n    //         lng: lng,\n    //         }\n    //     };\n    // }\n\n\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.google !== this.props.google) {\n    //         this.loadMap();\n    //     }\n    //     if (prevState.currentLocation !== this.state.currentLocation) {\n    //         this.recenterMap();\n    //     }\n    // }\n\n    // recenterMap() {\n    //     const map = this.map;\n    //     const current = this.state.currentLocation;\n\n    //     const google = this.props.google;\n    //     const maps = google.maps;\n\n\n    //     if (map) {\n    //         let center = new maps.LatLng(current.lat, current.lng);\n    //         map.panTo(center);\n    //     }\n    // }\n\n    // componentDidMount() {\n    //     if (this.props.centerAroundCurrentLocation) {\n    //         if (navigator && navigator.geolocation) {\n    //             navigator.geolocation.getCurrentPosition(pos => {\n    //                 const coords = pos.coords;\n    //                 this.setState({\n    //                     currentLocation: {\n    //                         lat: coords.latitude,\n    //                         lng: coords.longitude\n    //                     }\n    //                 });\n    //             });\n    //         }\n    //     }\n    //     this.loadMap();\n    // }\n\n    // loadMap() {\n    //     if (this.props && this.props.google) {\n    //     // is google available?\n    //     const { google } = this.props;\n    //     const maps = google.maps;\n    //     console.log('👩🏽‍💻👩🏽‍💻',maps)\n\n    //     const mapRef = this.refs.map;\n\n    //     // reference to the actual DOM element\n    //     const node = ReactDOM.findDOMNode(mapRef);\n\n    //     let { zoom } = this.props;\n    //     const { lat, lng } = this.state.currentLocation;\n    //     const center = new maps.LatLng(lat, lng);\n    //     const mapConfig = Object.assign(\n    //         {},\n    //         {\n    //             center: center,\n    //             zoom: zoom\n    //         }\n    //     );\n    //     // maps.Map() constructor instantiates the map\n    //     this.map = new maps.Map(node, mapConfig);\n    //     }\n    // }\n\n    // renderChildren() {\n    //     const { children } = this.props;\n\n    //     if (!children) return;\n\n    //     return React.Children.map(children, c => {\n    //         if (!c) return;\n    //         return React.cloneElement(c, {\n    //             map: this.map,\n    //             google: this.props.google,\n    //             mapCenter: this.state.currentLocation\n    //         });\n    //     });\n    // }\n\n    render() {\n        //const style = Object.assign({}, {mapStylesmap});\n        // console.log('👩🏽‍💻',this.map)\n\n        if (this.props.locations.length > 0) {\n            //var markerCluster = new MarkerClusterer(this.map, markers,\n                //{imagePath: '/markerclusterer/m'});\n                //console.log('😬😬😬', this.map, markers)\n        }\n\n        return (\n            <div>\n\n            <GoogleMap\n                id=\"marker-example\"\n                mapContainerStyle={{\n                height: \"400px\",\n                width: \"800px\"\n                }}\n                zoom={3}\n                center={{lat: -37.122, lng: -122}}\n            >\n            <MarkerClusterer\n            options={{imagePath:\"/markerclusterer/m\"}}\n            >\n            {\n                (clusterer) => [\n                {lat: -31.563910, lng: 147.154312},\n                {lat: -33.718234, lng: 150.363181},\n                {lat: -33.727111, lng: 150.371124},\n                {lat: -33.848588, lng: 151.209834},\n                {lat: -33.851702, lng: 151.216968},\n                {lat: -34.671264, lng: 150.863657},\n                {lat: -35.304724, lng: 148.662905},\n                {lat: -36.817685, lng: 175.699196},\n                {lat: -36.828611, lng: 175.790222},\n                {lat: -37.750000, lng: 145.116667},\n                {lat: -37.759859, lng: 145.128708},\n                {lat: -37.765015, lng: 145.133858},\n                {lat: -37.770104, lng: 145.143299},\n                {lat: -37.773700, lng: 145.145187},\n                {lat: -37.774785, lng: 145.137978},\n                {lat: -37.819616, lng: 144.968119},\n                {lat: -38.330766, lng: 144.695692},\n                {lat: -39.927193, lng: 175.053218},\n                {lat: -41.330162, lng: 174.865694},\n                {lat: -42.734358, lng: 147.439506},\n                {lat: -42.734358, lng: 147.501315},\n                {lat: -42.735258, lng: 147.438000},\n                {lat: -43.999792, lng: 170.463352}\n                ].map((location, i) => (\n                <Marker\n                    key={i}\n                    position={location}\n                    clusterer={clusterer}\n                />\n                ))\n            }\n            </MarkerClusterer>\n        </GoogleMap>\n\n            </div>\n\n\n        );\n    }\n}\n\n\n//     render() {\n//         const style = Object.assign({}, mapStyles.map);\n//         return (\n//             <Map google={this.props.google} zoom={14}>\n//             {this.renderChildren()}\n//             </Map>\n//         );\n//     }\n// }\n\n\n// SF centered lat/lng from google\nCurrentLoc.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n      lat: 37.7749,\n      lng: -122.4194\n    },\n    centerArroundCurrentLocation: false,\n    visible: true\n};\n\n   export default CurrentLoc;"]},"metadata":{},"sourceType":"module"}