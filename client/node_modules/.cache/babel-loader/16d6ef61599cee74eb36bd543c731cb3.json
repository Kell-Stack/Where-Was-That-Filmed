{"ast":null,"code":"var _jsxFileName = \"/Users/tpl9/Dev/WWTF/client/src/MapContainer.js\";\n\n/*global google */\nimport React, { Component } from 'react';\nimport { Map, GoogleAPI, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport CurrentLoc from './CurrentLoc';\nimport GoogleMap from './MarkerCluster';\nimport { Container, Row, Col } from 'react-bootstrap'; // import MarkerClusterer from '../public/markerclusterer/markerclusterer.js'\n// import {default as MarkerClusterer} from \"react-google-maps/lib/components/addons/MarkerClusterer\";\n// import MarkerClusterer from 'node-js-marker-clusterer';\n// import { MarkerClusterer } from '@react-google-maps/api';\n//import MarkerCluster from '/Users/tpl9/Dev/WWTF/client/src/markerclusterer/markerclusterer.js'\n\nexport class MapContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {} // markerCluster: {}\n\n    };\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n  }\n\n  render() {\n    // console.log(this.props.locations)\n    // console.log('ðŸ˜¬',MarkerClusterer)\n    // var markerCluster = new MarkerClusterer(this.props.maps, this.props.locations,\n    //     {imagePath: '/markerclusterer/m'});\n    //     console.log('ðŸ˜¬ðŸ˜¬ðŸ˜¬',markerCluster)\n    let position = new google.maps.LatLng(-34, 151);\n    console.log(\"!!!!!!!\", position, position.lat(), position.lng());\n    var markers = [];\n    var markerCluster;\n\n    if (this.props.locations.length > 0) {\n      markers = this.props.locations.map((locationData, idx) => {\n        let latlong = {\n          lat: parseFloat(locationData.lat),\n          lng: parseFloat(locationData.lng)\n        };\n        let position = new google.maps.LatLng(-34, 151); //console.log(position, parseFloat(locationData.lat), parseFloat(locationData.lng))\n\n        const entry = {\n          position: {\n            lat: -31.563910,\n            lng: 147.154312\n          },\n          name: this.props.locations[idx].title\n        };\n        return entry; // return <Marker\n        //         key={idx}\n        //         position={{lat: -31.563910, lng: 147.154312}}\n        //         onClick={this.onMarkerClick}\n        //         name={this.props.locations[idx].title}/>\n      });\n      console.log(\"hellloooo\", markers[0]);\n      markerCluster = React.createElement(MarkerCluster, {\n        markers: markers,\n        click: this.onMarkerClick,\n        mouseover: this.onMouseOver,\n        mouseout: this.onMouseOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      });\n      console.log(\"??\", markerCluster.markers, markers);\n    }\n\n    console.log(\"!!!\", google);\n    return React.createElement(Container, {\n      id: \"mapComponent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(GoogleMap, Object.assign({\n      google: this.props.google\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(Map, {\n      google: google,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(MarkerCluster, {\n      markers: markers,\n      click: this.onMarkerClick,\n      mouseover: this.onMouseOver,\n      mouseout: this.onMouseOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.state.selectedPlace.name)))));\n  }\n\n}\nMapContainer.propTypes = {\n  google: PropTypes.objectOf(PropTypes.any),\n  settings: PropTypes.objectOf(PropTypes.any)\n};\nMapContainer.defaultProps = {\n  google: null,\n  settings: null\n};\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBANS3n7z4t5krZlgs8Kq7PuYINovATF2s'\n})(MapContainer);","map":{"version":3,"sources":["/Users/tpl9/Dev/WWTF/client/src/MapContainer.js"],"names":["React","Component","Map","GoogleAPI","GoogleApiWrapper","InfoWindow","CurrentLoc","GoogleMap","Container","Row","Col","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","e","setState","onClose","render","position","google","maps","LatLng","console","log","lat","lng","markers","markerCluster","locations","length","map","locationData","idx","latlong","parseFloat","entry","name","title","onMouseOver","onMouseOut","propTypes","PropTypes","objectOf","any","settings","defaultProps","apiKey"],"mappings":"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","sourcesContent":["/*global google */\nimport React, { Component} from 'react';\nimport { Map, GoogleAPI, GoogleApiWrapper, InfoWindow} from 'google-maps-react';\nimport CurrentLoc from './CurrentLoc';\nimport GoogleMap from './MarkerCluster';\nimport {Container, Row, Col }from 'react-bootstrap'\n// import MarkerClusterer from '../public/markerclusterer/markerclusterer.js'\n// import {default as MarkerClusterer} from \"react-google-maps/lib/components/addons/MarkerClusterer\";\n// import MarkerClusterer from 'node-js-marker-clusterer';\n// import { MarkerClusterer } from '@react-google-maps/api';\n//import MarkerCluster from '/Users/tpl9/Dev/WWTF/client/src/markerclusterer/markerclusterer.js'\n\nexport class MapContainer extends Component {\n    state = {\n        showingInfoWindow: false,\n        activeMarker: {},\n        selectedPlace: {},\n        // markerCluster: {}\n\n    };\n\n    onMarkerClick = (props, marker, e) =>\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n\n    onClose = props => {\n        if (this.state.showingInfoWindow) {\n        this.setState({\n            showingInfoWindow: false,\n            activeMarker: null\n            });\n        }\n    };\n\n\n\n    render() {\n        // console.log(this.props.locations)\n        // console.log('ðŸ˜¬',MarkerClusterer)\n        // var markerCluster = new MarkerClusterer(this.props.maps, this.props.locations,\n        //     {imagePath: '/markerclusterer/m'});\n        //     console.log('ðŸ˜¬ðŸ˜¬ðŸ˜¬',markerCluster)\n\n        let position = new google.maps.LatLng(-34, 151);\n        console.log(\"!!!!!!!\", position, position.lat(), position.lng())\n\n        var markers = []\n        var markerCluster\n        if (this.props.locations.length > 0) {\n            markers = this.props.locations.map((locationData, idx) => {\n                let latlong = {lat: parseFloat(locationData.lat), lng: parseFloat(locationData.lng)}\n                let position = new google.maps.LatLng(-34, 151);\n                //console.log(position, parseFloat(locationData.lat), parseFloat(locationData.lng))\n                const entry = {\n                    position: {\n                      lat: -31.563910,\n                      lng: 147.154312\n                    },\n                    name: this.props.locations[idx].title\n                  }\n\n                return entry\n                // return <Marker\n                //         key={idx}\n                //         position={{lat: -31.563910, lng: 147.154312}}\n                //         onClick={this.onMarkerClick}\n                //         name={this.props.locations[idx].title}/>\n            })\n\n            console.log(\"hellloooo\",markers[0])\n\n            markerCluster = <MarkerCluster\n                            markers={markers}\n                            click={this.onMarkerClick}\n                            mouseover={this.onMouseOver}\n                            mouseout={this.onMouseOut}\n                        />\n\n            console.log(\"??\", markerCluster.markers, markers)\n        }\n        console.log(\"!!!\",google)\n        return (\n\n            <Container id=\"mapComponent\">\n\n            <GoogleMap\n            google={this.props.google}\n            {...this.props}\n            />\n\n                    <Map google={google}>\n\n                    <MarkerCluster\n                            markers={markers}\n                            click={this.onMarkerClick}\n                            mouseover={this.onMouseOver}\n                            mouseout={this.onMouseOut}\n                        />\n\n\n\n                        <InfoWindow\n                            marker={this.state.activeMarker}\n                            visible={this.state.showingInfoWindow}\n                            onClose={this.onClose}\n                        >\n                            <div>\n                                <h4>{this.state.selectedPlace.name}</h4>\n                            </div>\n                        </InfoWindow>\n                    </Map>\n\n            </Container>\n        )\n    }\n}\n\nMapContainer.propTypes = {\n  google: PropTypes.objectOf(PropTypes.any),\n  settings: PropTypes.objectOf(PropTypes.any),\n};\nMapContainer.defaultProps = {\n  google: null,\n  settings: null,\n};\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyBANS3n7z4t5krZlgs8Kq7PuYINovATF2s'\n  })(MapContainer);"]},"metadata":{},"sourceType":"module"}